;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <interrupt.h>
;	flags -> R17

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
	cli
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;#include <delay.h>
;
;// Pin definitions
;#define BUZZER_PIN PORTB.0       // Buzzer connected to PORTB bit 0
;
;// Timekeeping variables
;volatile unsigned char seconds = 0;
;volatile unsigned char minutes = 0;
;volatile unsigned char hours = 8; // Start from 8:00 AM

	.DSEG
;
;// Predefined bell timings (hours and minutes)
;const unsigned char bell_timings[][2] = {
;    {8, 0},  // 8:00 AM
;    {9, 30}, // 9:30 AM
;    {12, 0}, // 12:00 PM
;    {15, 0}  // 3:00 PM
;};
;
;// Function to initialize Timer1
;void timer1_init() {
; 0000 0016 void timer1_init() {

	.CSEG
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0017     TCCR1A = 0x00;               // Normal mode
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0018     TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10); // CTC mode, prescaler 1024
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0019     OCR1A = 15624;               // Compare value for 1 second (16 MHz clock)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 001A     TIMSK |= (1 << OCIE1A);      // Enable Timer1 compare interrupt
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 001B }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;
;// Function to activate the buzzer
;void activate_buzzer() {
; 0000 001E void activate_buzzer() {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 001F     BUZZER_PIN = 1;              // Turn on buzzer
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0020     delay_ms(3000);              // Keep buzzer on for 3 seconds
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0021     BUZZER_PIN = 0;              // Turn off buzzer
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0022 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;
;// Function to check if the current time matches bell timing
;unsigned char check_bell(unsigned char hour, unsigned char minute) {
; 0000 0025 unsigned char check_bell(unsigned char hour, unsigned char minute) {
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0026     unsigned char i;
; 0000 0027     for (i = 0; i < sizeof(bell_timings) / 2; i++) {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;	hour -> Y+2
;	minute -> Y+1
;	i -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0028         if (bell_timings[i][0] == hour && bell_timings[i][1] == minute) {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0029             return 1; // Match found
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 002A         }
; 0000 002B     }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 002C     return 0; // No match
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 002D }
;PCODE: $00000061 VOL: 0
;
;// Timer1 Compare Match Interrupt Service Routine (ISR)
;interrupt [TIM1_COMPA] void timer1_isr(void) {
; 0000 0030 interrupt [13] void timer1_isr(void) {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0031     seconds++; // Increment seconds
;PCODE: $00000064 VOL: 1
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 1
; 0000 0032     if (seconds >= 60) {
;PCODE: $00000067 VOL: 1
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0033         seconds = 0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 1
; 0000 0034         minutes++;
;PCODE: $0000006C VOL: 1
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 1
; 0000 0035         if (minutes >= 60) {
;PCODE: $0000006F VOL: 1
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0036             minutes = 0;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 1
; 0000 0037             hours++;
;PCODE: $00000074 VOL: 1
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 1
; 0000 0038             if (hours >= 24) {
;PCODE: $00000077 VOL: 1
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0039                 hours = 0; // Reset to midnight
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 1
; 0000 003A             }
; 0000 003B         }
;PCODE: $0000007C VOL: 0
; 0000 003C     }
;PCODE: $0000007D VOL: 0
; 0000 003D }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;
;void main(void) {
; 0000 003F void main(void) {
;PCODE: $00000082 VOL: 0
; 0000 0040     // Set clock frequency (optional, use CodeWizardAVR for configuration if needed)
; 0000 0041     #asm
;PCODE: $00000083 VOL: 0
; 0000 0042         cli // Disable interrupts during setup
        cli // Disable interrupts during setup
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0043     #endasm
; 0000 0044 
; 0000 0045     // Initialize buzzer pin
; 0000 0046     DDRB.0 = 1;    // Configure PORTB.0 as output
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0047     BUZZER_PIN = 0; // Ensure buzzer is off
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0048 
; 0000 0049     // Initialize Timer1
; 0000 004A     timer1_init();
;PCODE: $0000008A VOL: 0
; 0000 004B 
; 0000 004C     // Enable global interrupts
; 0000 004D     #asm
;PCODE: $0000008B VOL: 0
; 0000 004E         sei
        sei
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 004F     #endasm
; 0000 0050 
; 0000 0051     while (1) {
;PCODE: $0000008E VOL: 0
; 0000 0052         // Check if it's time to ring the bell
; 0000 0053         if (check_bell(hours, minutes)) {
;PCODE: $0000008F VOL: 1
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 1
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0054             activate_buzzer(); // Activate buzzer for the bell
;PCODE: $00000095 VOL: 0
; 0000 0055         }
; 0000 0056 
; 0000 0057         // Main loop can include additional logic (e.g., display code)
; 0000 0058     }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0059 }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
