
AVRASM ver. 2.1.30  C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\RTC\Debug\List\RTC.asm Thu Nov 28 16:39:30 2024

C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\RTC\Debug\List\RTC.asm(1090): warning: Register r4 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\RTC\Debug\List\RTC.asm(1091): warning: Register r5 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\RTC\Debug\List\RTC.asm(1092): warning: Register r6 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\RTC\Debug\List\RTC.asm(1093): warning: Register r7 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\RTC\Debug\List\RTC.asm(1094): warning: Register r9 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\RTC\Debug\List\RTC.asm(1095): warning: Register r8 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\RTC\Debug\List\RTC.asm(1096): warning: Register r11 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\RTC\Debug\List\RTC.asm(1097): warning: Register r10 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\RTC\Debug\List\RTC.asm(1098): warning: Register r13 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\RTC\Debug\List\RTC.asm(1099): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _d=R4
                 	.DEF _d_msb=R5
                 	.DEF _dem=R6
                 	.DEF _dem_msb=R7
                 	.DEF _hour=R9
                 	.DEF _minute=R8
                 	.DEF _second=R11
                 	.DEF _day=R10
                 	.DEF _month=R13
                 	.DEF _year=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 009f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 00cf 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x6:
00004f 0500
000050 0504
000051 0508
000052 050c      	.DB  LOW(_0x5),HIGH(_0x5),LOW(_0x5+4),HIGH(_0x5+4),LOW(_0x5+8),HIGH(_0x5+8),LOW(_0x5+12),HIGH(_0x5+12)
000053 0510
000054 0514
000055 0518
000056 051c      	.DB  LOW(_0x5+16),HIGH(_0x5+16),LOW(_0x5+20),HIGH(_0x5+20),LOW(_0x5+24),HIGH(_0x5+24),LOW(_0x5+28),HIGH(_0x5+28)
                 _0x0:
000057 7245
000058 0072
000059 7553
00005a 006e      	.DB  0x45,0x72,0x72,0x0,0x53,0x75,0x6E,0x0
00005b 6f4d
00005c 006e
00005d 7554
00005e 0065      	.DB  0x4D,0x6F,0x6E,0x0,0x54,0x75,0x65,0x0
00005f 6557
000060 0064
000061 6854
000062 0075      	.DB  0x57,0x65,0x64,0x0,0x54,0x68,0x75,0x0
000063 7246
000064 0069
000065 6153
000066 0074      	.DB  0x46,0x72,0x69,0x0,0x53,0x61,0x74,0x0
000067 3025
000068 7532
000069 253a
00006a 3230      	.DB  0x25,0x30,0x32,0x75,0x3A,0x25,0x30,0x32
00006b 3a75
00006c 3025
00006d 7532
00006e 5400      	.DB  0x75,0x3A,0x25,0x30,0x32,0x75,0x0,0x54
00006f 6d69
000070 3a65
000071 2500
000072 3230      	.DB  0x69,0x6D,0x65,0x3A,0x0,0x25,0x30,0x32
000073 2f75
000074 3025
000075 7532
000076 322f      	.DB  0x75,0x2F,0x25,0x30,0x32,0x75,0x2F,0x32
000077 2530
000078 3230
000079 2075
00007a 7325      	.DB  0x30,0x25,0x30,0x32,0x75,0x20,0x25,0x73
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\RTC\Debug\List\RTC.asm(1163): warning: .cseg .db misalignment - padding zero byte
00007b 0000      	.DB  0x0
                 _0x2000003:
00007c c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00007d 0004      	.DW  0x04
00007e 0500      	.DW  _0x5
00007f 00ae      	.DW  _0x0*2
                 
000080 0004      	.DW  0x04
000081 0504      	.DW  _0x5+4
000082 00b2      	.DW  _0x0*2+4
                 
000083 0004      	.DW  0x04
000084 0508      	.DW  _0x5+8
000085 00b6      	.DW  _0x0*2+8
                 
000086 0004      	.DW  0x04
000087 050c      	.DW  _0x5+12
000088 00ba      	.DW  _0x0*2+12
                 
000089 0004      	.DW  0x04
00008a 0510      	.DW  _0x5+16
00008b 00be      	.DW  _0x0*2+16
                 
00008c 0004      	.DW  0x04
00008d 0514      	.DW  _0x5+20
00008e 00c2      	.DW  _0x0*2+20
                 
00008f 0004      	.DW  0x04
000090 0518      	.DW  _0x5+24
000091 00c6      	.DW  _0x0*2+24
                 
000092 0004      	.DW  0x04
000093 051c      	.DW  _0x5+28
000094 00ca      	.DW  _0x0*2+28
                 
000095 0010      	.DW  0x10
000096 0527      	.DW  _weekdays
000097 009e      	.DW  _0x6*2
                 
000098 0006      	.DW  0x06
000099 0520      	.DW  _0xF
00009a 00dd      	.DW  _0x0*2+47
                 
00009b 0002      	.DW  0x02
00009c 0537      	.DW  __base_y_G100
00009d 00f8      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00009e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00009f 94f8      	CLI
0000a0 27ee      	CLR  R30
0000a1 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000a2 e0f1      	LDI  R31,1
0000a3 bff5      	OUT  MCUCR,R31
0000a4 bfe5      	OUT  MCUCR,R30
0000a5 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
0000a7 e08d      	LDI  R24,(14-2)+1
0000a8 e0a2      	LDI  R26,2
0000a9 27bb      	CLR  R27
                 __CLEAR_REG:
0000aa 93ed      	ST   X+,R30
0000ab 958a      	DEC  R24
0000ac f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000ad e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000ae e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000af e0a0      	LDI  R26,LOW(__SRAM_START)
0000b0 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000b1 93ed      	ST   X+,R30
0000b2 9701      	SBIW R24,1
0000b3 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000b4 efea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000b5 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000b6 9185      	LPM  R24,Z+
0000b7 9195      	LPM  R25,Z+
0000b8 9700      	SBIW R24,0
0000b9 f061      	BREQ __GLOBAL_INI_END
0000ba 91a5      	LPM  R26,Z+
0000bb 91b5      	LPM  R27,Z+
0000bc 9005      	LPM  R0,Z+
0000bd 9015      	LPM  R1,Z+
0000be 01bf      	MOVW R22,R30
0000bf 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000c0 9005      	LPM  R0,Z+
0000c1 920d      	ST   X+,R0
0000c2 9701      	SBIW R24,1
0000c3 f7e1      	BRNE __GLOBAL_INI_LOOP
0000c4 01fb      	MOVW R30,R22
0000c5 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000c6 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000c7 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000c8 bfed      	OUT  SPL,R30
0000c9 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ca bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000cb e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000cc e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000cd 940c 0106 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <i2c.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <ds1307.h>
                 ;
                 ;int d; // Blink flag
                 ;unsigned int dem; // Timer counter
                 ;unsigned char hour, minute, second; // Time variables
                 ;unsigned char day, month, year, weekday; // Date variables
                 ;//unsigned int count;
                 ;
                 ;
                 ;// Timer0 interrupt for blinking colon
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0000 0010 interrupt[17] void timer0_ovf_isr(void) {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000cf 93ea      	ST   -Y,R30
0000d0 93fa      	ST   -Y,R31
0000d1 b7ef      	IN   R30,SREG
0000d2 93ea      	ST   -Y,R30
                 ; 0000 0011     TCNT0 = 0x66; // Reload timer
0000d3 e6e6      	LDI  R30,LOW(102)
0000d4 bfe2      	OUT  0x32,R30
                 ; 0000 0012     dem++;
0000d5 01f3      	MOVW R30,R6
0000d6 9631      	ADIW R30,1
0000d7 013f      	MOVW R6,R30
                 ; 0000 0013     if (dem == 1000) d = 1; // Blink colon
0000d8 eee8      	LDI  R30,LOW(1000)
0000d9 e0f3      	LDI  R31,HIGH(1000)
0000da 15e6      	CP   R30,R6
0000db 05f7      	CPC  R31,R7
0000dc f419      	BRNE _0x3
0000dd e0e1      	LDI  R30,LOW(1)
0000de e0f0      	LDI  R31,HIGH(1)
0000df 012f      	MOVW R4,R30
                 ; 0000 0014     if (dem == 2000) {
                 _0x3:
0000e0 ede0      	LDI  R30,LOW(2000)
0000e1 e0f7      	LDI  R31,HIGH(2000)
0000e2 15e6      	CP   R30,R6
0000e3 05f7      	CPC  R31,R7
0000e4 f421      	BRNE _0x4
                 ; 0000 0015         dem = 0;
0000e5 2466      	CLR  R6
0000e6 2477      	CLR  R7
                 ; 0000 0016         d = 0;
0000e7 2444      	CLR  R4
0000e8 2455      	CLR  R5
                 ; 0000 0017     }
                 ; 0000 0018 }
                 _0x4:
0000e9 91e9      	LD   R30,Y+
0000ea bfef      	OUT  SREG,R30
0000eb 91f9      	LD   R31,Y+
0000ec 91e9      	LD   R30,Y+
0000ed 9518      	RETI
                 ; .FEND
                 ;
                 ;const char *weekdays[] = {
                 ;    "Err", // Default for invalid day
                 ;    "Sun",
                 ;    "Mon",
                 ;    "Tue",
                 ;    "Wed",
                 ;    "Thu",
                 ;    "Fri",
                 ;    "Sat"
                 ;};
                 
                 	.DSEG
                 _0x5:
000500           	.BYTE 0x20
                 ;
                 ;const char *get_weekday_name(unsigned char weekday) {
                 ; 0000 0025 const char *get_weekday_name(unsigned char weekday) {
                 
                 	.CSEG
                 _get_weekday_name:
                 ; .FSTART _get_weekday_name
                 ; 0000 0026     if (weekday >= 1 && weekday <= 7) {
0000ee 93aa      	ST   -Y,R26
                 ;	weekday -> Y+0
0000ef 81a8      	LD   R26,Y
0000f0 30a1      	CPI  R26,LOW(0x1)
0000f1 f010      	BRLO _0x8
0000f2 30a8      	CPI  R26,LOW(0x8)
0000f3 f008      	BRLO _0x9
                 _0x8:
0000f4 c00c      	RJMP _0x7
                 _0x9:
                 ; 0000 0027         return weekdays[weekday]; // Return valid day
0000f5 81e8      	LD   R30,Y
0000f6 e2a7      	LDI  R26,LOW(_weekdays)
0000f7 e0b5      	LDI  R27,HIGH(_weekdays)
0000f8 e0f0      	LDI  R31,0
0000f9 0fee      	LSL  R30
0000fa 1fff      	ROL  R31
0000fb 0fae      	ADD  R26,R30
0000fc 1fbf      	ADC  R27,R31
0000fd 940e 0564 	CALL __GETW1P
0000ff 940c 0248 	JMP  _0x20C0004
                 ; 0000 0028     }
                 ; 0000 0029     return weekdays[0]; // Return "Err" for invalid
                 _0x7:
000101 91e0 0527 	LDS  R30,_weekdays
000103 91f0 0528 	LDS  R31,_weekdays+1
000105 c142      	RJMP _0x20C0004
                 ; 0000 002A }
                 ; .FEND
                 ;
                 ;
                 ;void main(void) {
                 ; 0000 002D void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 002E     char time_str[16]; // Buffer for time
                 ; 0000 002F     char date_str[16]; // Buffer for date
                 ; 0000 0030     unsigned char prev_day = 31; // To detect day change
                 ; 0000 0031     //DDRC.0 = 1;
                 ; 0000 0032     //PORTC.0 = 1;
                 ; 0000 0033 
                 ; 0000 0034     // Initialize peripherals
                 ; 0000 0035     i2c_init();
000106 97a0      	SBIW R28,32
                 ;	time_str -> Y+16
                 ;	date_str -> Y+0
                 ;	prev_day -> R17
000107 e11f      	LDI  R17,31
000108 940e 0501 	CALL _i2c_init
                 ; 0000 0036     lcd_init(16);
00010a e1a0      	LDI  R26,LOW(16)
00010b d10e      	RCALL _lcd_init
                 ; 0000 0037     rtc_init(3, 1, 0);
00010c e0e3      	LDI  R30,LOW(3)
00010d 93ea      	ST   -Y,R30
00010e e0e1      	LDI  R30,LOW(1)
00010f 93ea      	ST   -Y,R30
000110 e0a0      	LDI  R26,LOW(0)
000111 940e 03f2 	CALL _rtc_init
                 ; 0000 0038     rtc_set_time(23, 59, 58); // Set time
000113 e1e7      	LDI  R30,LOW(23)
000114 93ea      	ST   -Y,R30
000115 e3eb      	LDI  R30,LOW(59)
000116 93ea      	ST   -Y,R30
000117 e3aa      	LDI  R26,LOW(58)
000118 940e 0420 	CALL _rtc_set_time
                 ; 0000 0039     rtc_set_date(4, 31, 12, 24); // Set date
00011a e0e4      	LDI  R30,LOW(4)
00011b 93ea      	ST   -Y,R30
00011c e1ef      	LDI  R30,LOW(31)
00011d 93ea      	ST   -Y,R30
00011e e0ec      	LDI  R30,LOW(12)
00011f 93ea      	ST   -Y,R30
000120 e1a8      	LDI  R26,LOW(24)
000121 940e 044b 	CALL _rtc_set_date
                 ; 0000 003A 
                 ; 0000 003B     #asm("sei") // Enable global interrupts
000123 9478      	sei
                 ; 0000 003C 
                 ; 0000 003D     while (1) {
                 _0xA:
                 ; 0000 003E         // Fetch time and date
                 ; 0000 003F         rtc_get_time(&hour, &minute, &second);
000124 e0e9      	LDI  R30,LOW(9)
000125 e0f0      	LDI  R31,HIGH(9)
000126 93fa      	ST   -Y,R31
000127 93ea      	ST   -Y,R30
000128 e0e8      	LDI  R30,LOW(8)
000129 e0f0      	LDI  R31,HIGH(8)
00012a 93fa      	ST   -Y,R31
00012b 93ea      	ST   -Y,R30
00012c e0ab      	LDI  R26,LOW(11)
00012d e0b0      	LDI  R27,HIGH(11)
00012e 940e 0409 	CALL _rtc_get_time
                 ; 0000 0040         rtc_get_date(&weekday, &day, &month, &year);
000130 e2e6      	LDI  R30,LOW(_weekday)
000131 e0f5      	LDI  R31,HIGH(_weekday)
000132 93fa      	ST   -Y,R31
000133 93ea      	ST   -Y,R30
000134 e0ea      	LDI  R30,LOW(10)
000135 e0f0      	LDI  R31,HIGH(10)
000136 93fa      	ST   -Y,R31
000137 93ea      	ST   -Y,R30
000138 e0ed      	LDI  R30,LOW(13)
000139 e0f0      	LDI  R31,HIGH(13)
00013a 93fa      	ST   -Y,R31
00013b 93ea      	ST   -Y,R30
00013c e0ac      	LDI  R26,LOW(12)
00013d e0b0      	LDI  R27,HIGH(12)
00013e 940e 0432 	CALL _rtc_get_date
                 ; 0000 0041 
                 ; 0000 0042         // Check for day change
                 ; 0000 0043         if (day != prev_day) {
000140 151a      	CP   R17,R10
000141 f069      	BREQ _0xD
                 ; 0000 0044             prev_day = day; // Update previous day
000142 2d1a      	MOV  R17,R10
                 ; 0000 0045             weekday++; // Increment weekday
000143 91e0 0526 	LDS  R30,_weekday
000145 5fef      	SUBI R30,-LOW(1)
000146 93e0 0526 	STS  _weekday,R30
                 ; 0000 0046             if (weekday > 7) weekday = 1; // Wrap around if > 7
000148 91a0 0526 	LDS  R26,_weekday
00014a 30a8      	CPI  R26,LOW(0x8)
00014b f018      	BRLO _0xE
00014c e0e1      	LDI  R30,LOW(1)
00014d 93e0 0526 	STS  _weekday,R30
                 ; 0000 0047         }
                 _0xE:
                 ; 0000 0048 
                 ; 0000 0049         // Format and display time
                 ; 0000 004A         sprintf(time_str, "%02u:%02u:%02u", hour, minute, second);
                 _0xD:
00014f 01fe      	MOVW R30,R28
000150 9670      	ADIW R30,16
000151 93fa      	ST   -Y,R31
000152 93ea      	ST   -Y,R30
                +
000153 ecee     +LDI R30 , LOW ( 2 * _0x0 + ( 32 ) )
000154 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 32 ) )
                 	__POINTW1FN _0x0,32
000155 93fa      	ST   -Y,R31
000156 93ea      	ST   -Y,R30
000157 2de9      	MOV  R30,R9
000158 940e 0490 	CALL SUBOPT_0x0
00015a 2de8      	MOV  R30,R8
00015b 940e 0490 	CALL SUBOPT_0x0
00015d 2deb      	MOV  R30,R11
00015e 940e 0490 	CALL SUBOPT_0x0
000160 e08c      	LDI  R24,12
000161 940e 03be 	CALL _sprintf
000163 9660      	ADIW R28,16
                 ; 0000 004B         lcd_clear();
000164 d077      	RCALL _lcd_clear
                 ; 0000 004C         lcd_gotoxy(0, 0);
000165 e0e0      	LDI  R30,LOW(0)
000166 93ea      	ST   -Y,R30
000167 e0a0      	LDI  R26,LOW(0)
000168 d062      	RCALL _lcd_gotoxy
                 ; 0000 004D         lcd_puts("Time:");
                +
000169 e2a0     +LDI R26 , LOW ( _0xF + ( 0 ) )
00016a e0b5     +LDI R27 , HIGH ( _0xF + ( 0 ) )
                 	__POINTW2MN _0xF,0
00016b d09e      	RCALL _lcd_puts
                 ; 0000 004E         lcd_gotoxy(6, 0);
00016c e0e6      	LDI  R30,LOW(6)
00016d 93ea      	ST   -Y,R30
00016e e0a0      	LDI  R26,LOW(0)
00016f d05b      	RCALL _lcd_gotoxy
                 ; 0000 004F         lcd_puts(time_str);
000170 01de      	MOVW R26,R28
000171 9650      	ADIW R26,16
000172 d097      	RCALL _lcd_puts
                 ; 0000 0050 
                 ; 0000 0051         // Format and display date
                 ; 0000 0052         sprintf(date_str, "%02u/%02u/20%02u %s", day, month, year, get_weekday_name(weekday));
000173 01fe      	MOVW R30,R28
000174 93fa      	ST   -Y,R31
000175 93ea      	ST   -Y,R30
                +
000176 eee3     +LDI R30 , LOW ( 2 * _0x0 + ( 53 ) )
000177 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 53 ) )
                 	__POINTW1FN _0x0,53
000178 93fa      	ST   -Y,R31
000179 93ea      	ST   -Y,R30
00017a 2dea      	MOV  R30,R10
00017b 940e 0490 	CALL SUBOPT_0x0
00017d 2ded      	MOV  R30,R13
00017e 940e 0490 	CALL SUBOPT_0x0
000180 2dec      	MOV  R30,R12
000181 940e 0490 	CALL SUBOPT_0x0
000183 91a0 0526 	LDS  R26,_weekday
000185 df68      	RCALL _get_weekday_name
000186 2766      	CLR  R22
000187 2777      	CLR  R23
000188 940e 056c 	CALL __PUTPARD1
00018a e180      	LDI  R24,16
00018b 940e 03be 	CALL _sprintf
00018d 9664      	ADIW R28,20
                 ; 0000 0053         lcd_gotoxy(0, 1);
00018e e0e0      	LDI  R30,LOW(0)
00018f 93ea      	ST   -Y,R30
000190 e0a1      	LDI  R26,LOW(1)
000191 d039      	RCALL _lcd_gotoxy
                 ; 0000 0054         lcd_puts(date_str);
000192 01de      	MOVW R26,R28
000193 d076      	RCALL _lcd_puts
                 ; 0000 0055 
                 ; 0000 0056         delay_ms(500); // Avoid flicker
000194 efa4      	LDI  R26,LOW(500)
000195 e0b1      	LDI  R27,HIGH(500)
000196 940e 0552 	CALL _delay_ms
                 ; 0000 0057     }
000198 cf8b      	RJMP _0xA
                 ; 0000 0058 }
                 _0x10:
000199 cfff      	RJMP _0x10
                 ; .FEND
                 
                 	.DSEG
                 _0xF:
000520           	.BYTE 0x6
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00019a 93aa      	ST   -Y,R26
00019b 81e8      	LD   R30,Y
00019c 71e0      	ANDI R30,LOW(0x10)
00019d f011      	BREQ _0x2000004
00019e 9ac3      	SBI  0x18,3
00019f c001      	RJMP _0x2000005
                 _0x2000004:
0001a0 98c3      	CBI  0x18,3
                 _0x2000005:
0001a1 81e8      	LD   R30,Y
0001a2 72e0      	ANDI R30,LOW(0x20)
0001a3 f011      	BREQ _0x2000006
0001a4 9ac4      	SBI  0x18,4
0001a5 c001      	RJMP _0x2000007
                 _0x2000006:
0001a6 98c4      	CBI  0x18,4
                 _0x2000007:
0001a7 81e8      	LD   R30,Y
0001a8 74e0      	ANDI R30,LOW(0x40)
0001a9 f011      	BREQ _0x2000008
0001aa 9ac5      	SBI  0x18,5
0001ab c001      	RJMP _0x2000009
                 _0x2000008:
0001ac 98c5      	CBI  0x18,5
                 _0x2000009:
0001ad 81e8      	LD   R30,Y
0001ae 78e0      	ANDI R30,LOW(0x80)
0001af f011      	BREQ _0x200000A
0001b0 9ac6      	SBI  0x18,6
0001b1 c001      	RJMP _0x200000B
                 _0x200000A:
0001b2 98c6      	CBI  0x18,6
                 _0x200000B:
                +
0001b3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001b4 958a     +DEC R24
0001b5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001b6 9ac2      	SBI  0x18,2
                +
0001b7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001b8 958a     +DEC R24
0001b9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001ba 98c2      	CBI  0x18,2
                +
0001bb e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001bc 958a     +DEC R24
0001bd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001be c089      	RJMP _0x20C0004
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001bf 93aa      	ST   -Y,R26
0001c0 81a8      	LD   R26,Y
0001c1 dfd8      	RCALL __lcd_write_nibble_G100
0001c2 81e8          ld    r30,y
0001c3 95e2          swap  r30
0001c4 83e8          st    y,r30
0001c5 81a8      	LD   R26,Y
0001c6 dfd3      	RCALL __lcd_write_nibble_G100
                +
0001c7 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001c8 958a     +DEC R24
0001c9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001ca c07d      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001cb 93aa      	ST   -Y,R26
0001cc 81e8      	LD   R30,Y
0001cd e0f0      	LDI  R31,0
0001ce 5ce9      	SUBI R30,LOW(-__base_y_G100)
0001cf 4ffa      	SBCI R31,HIGH(-__base_y_G100)
0001d0 81e0      	LD   R30,Z
0001d1 81a9      	LDD  R26,Y+1
0001d2 0fae      	ADD  R26,R30
0001d3 dfeb      	RCALL __lcd_write_data
0001d4 81e9      	LDD  R30,Y+1
0001d5 93e0 053b 	STS  __lcd_x,R30
0001d7 81e8      	LD   R30,Y
0001d8 93e0 053c 	STS  __lcd_y,R30
0001da 9622      	ADIW R28,2
0001db 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001dc e0a2      	LDI  R26,LOW(2)
0001dd 940e 0496 	CALL SUBOPT_0x1
0001df e0ac      	LDI  R26,LOW(12)
0001e0 dfde      	RCALL __lcd_write_data
0001e1 e0a1      	LDI  R26,LOW(1)
0001e2 940e 0496 	CALL SUBOPT_0x1
0001e4 e0e0      	LDI  R30,LOW(0)
0001e5 93e0 053c 	STS  __lcd_y,R30
0001e7 93e0 053b 	STS  __lcd_x,R30
0001e9 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001ea 93aa      	ST   -Y,R26
0001eb 81a8      	LD   R26,Y
0001ec 30aa      	CPI  R26,LOW(0xA)
0001ed f031      	BREQ _0x2000011
0001ee 91e0 053d 	LDS  R30,__lcd_maxx
0001f0 91a0 053b 	LDS  R26,__lcd_x
0001f2 17ae      	CP   R26,R30
0001f3 f060      	BRLO _0x2000010
                 _0x2000011:
0001f4 e0e0      	LDI  R30,LOW(0)
0001f5 93ea      	ST   -Y,R30
0001f6 91a0 053c 	LDS  R26,__lcd_y
0001f8 5faf      	SUBI R26,-LOW(1)
0001f9 93a0 053c 	STS  __lcd_y,R26
0001fb dfcf      	RCALL _lcd_gotoxy
0001fc 81a8      	LD   R26,Y
0001fd 30aa      	CPI  R26,LOW(0xA)
0001fe f409      	BRNE _0x2000013
0001ff c048      	RJMP _0x20C0004
                 _0x2000013:
                 _0x2000010:
000200 91e0 053b 	LDS  R30,__lcd_x
000202 5fef      	SUBI R30,-LOW(1)
000203 93e0 053b 	STS  __lcd_x,R30
000205 9ac0      	SBI  0x18,0
000206 81a8      	LD   R26,Y
000207 dfb7      	RCALL __lcd_write_data
000208 98c0      	CBI  0x18,0
000209 c03e      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00020a 93ba      	ST   -Y,R27
00020b 93aa      	ST   -Y,R26
00020c 931a      	ST   -Y,R17
                 _0x2000014:
00020d 81a9      	LDD  R26,Y+1
00020e 81ba      	LDD  R27,Y+1+1
00020f 91ed      	LD   R30,X+
000210 83a9      	STD  Y+1,R26
000211 83ba      	STD  Y+1+1,R27
000212 2f1e      	MOV  R17,R30
000213 30e0      	CPI  R30,0
000214 f019      	BREQ _0x2000016
000215 2fa1      	MOV  R26,R17
000216 dfd3      	RCALL _lcd_putchar
000217 cff5      	RJMP _0x2000014
                 _0x2000016:
000218 8118      	LDD  R17,Y+0
000219 c216      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00021a 93aa      	ST   -Y,R26
00021b 9abb      	SBI  0x17,3
00021c 9abc      	SBI  0x17,4
00021d 9abd      	SBI  0x17,5
00021e 9abe      	SBI  0x17,6
00021f 9aba      	SBI  0x17,2
000220 9ab8      	SBI  0x17,0
000221 9ab9      	SBI  0x17,1
000222 98c2      	CBI  0x18,2
000223 98c0      	CBI  0x18,0
000224 98c1      	CBI  0x18,1
000225 81e8      	LD   R30,Y
000226 93e0 053d 	STS  __lcd_maxx,R30
000228 58e0      	SUBI R30,-LOW(128)
                +
000229 93e0 0539+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00022b 81e8      	LD   R30,Y
00022c 54e0      	SUBI R30,-LOW(192)
                +
00022d 93e0 053a+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00022f e1a4      	LDI  R26,LOW(20)
000230 e0b0      	LDI  R27,0
000231 940e 0552 	CALL _delay_ms
000233 940e 049c 	CALL SUBOPT_0x2
000235 940e 049c 	CALL SUBOPT_0x2
000237 940e 049c 	CALL SUBOPT_0x2
000239 e2a0      	LDI  R26,LOW(32)
00023a df5f      	RCALL __lcd_write_nibble_G100
                +
00023b ec88     +LDI R24 , LOW ( 200 )
00023c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00023d 9701     +SBIW R24 , 1
00023e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00023f e2a8      	LDI  R26,LOW(40)
000240 df7e      	RCALL __lcd_write_data
000241 e0a4      	LDI  R26,LOW(4)
000242 df7c      	RCALL __lcd_write_data
000243 e8a5      	LDI  R26,LOW(133)
000244 df7a      	RCALL __lcd_write_data
000245 e0a6      	LDI  R26,LOW(6)
000246 df78      	RCALL __lcd_write_data
000247 df94      	RCALL _lcd_clear
                 _0x20C0004:
000248 9621      	ADIW R28,1
000249 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00024a 93ba      	ST   -Y,R27
00024b 93aa      	ST   -Y,R26
00024c 931a      	ST   -Y,R17
00024d 930a      	ST   -Y,R16
00024e 81aa      	LDD  R26,Y+2
00024f 81bb      	LDD  R27,Y+2+1
000250 9612      	ADIW R26,2
000251 940e 0564 	CALL __GETW1P
000253 9730      	SBIW R30,0
000254 f159      	BREQ _0x2020010
000255 81aa      	LDD  R26,Y+2
000256 81bb      	LDD  R27,Y+2+1
000257 9614      	ADIW R26,4
000258 940e 0564 	CALL __GETW1P
00025a 018f      	MOVW R16,R30
00025b 9730      	SBIW R30,0
00025c f061      	BREQ _0x2020012
                +
00025d 3002     +CPI R16 , LOW ( 2 )
00025e e0e0     +LDI R30 , HIGH ( 2 )
00025f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000260 f098      	BRLO _0x2020013
000261 01f8      	MOVW R30,R16
000262 9731      	SBIW R30,1
000263 018f      	MOVW R16,R30
                +
000264 81aa     +LDD R26 , Y + 2
000265 81bb     +LDD R27 , Y + 2 + 1
000266 9614     +ADIW R26 , 4
000267 93ed     +ST X + , R30
000268 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000269 81aa      	LDD  R26,Y+2
00026a 81bb      	LDD  R27,Y+2+1
00026b 9612      	ADIW R26,2
00026c 91ed      	LD   R30,X+
00026d 91fd      	LD   R31,X+
00026e 9631      	ADIW R30,1
00026f 93fe      	ST   -X,R31
000270 93ee      	ST   -X,R30
000271 9731      	SBIW R30,1
000272 81ac      	LDD  R26,Y+4
000273 83a0      	STD  Z+0,R26
                 _0x2020013:
000274 81aa      	LDD  R26,Y+2
000275 81bb      	LDD  R27,Y+2+1
000276 940e 0564 	CALL __GETW1P
000278 23ff      	TST  R31
000279 f02a      	BRMI _0x2020014
00027a 91ed      	LD   R30,X+
00027b 91fd      	LD   R31,X+
00027c 9631      	ADIW R30,1
00027d 93fe      	ST   -X,R31
00027e 93ee      	ST   -X,R30
                 _0x2020014:
00027f c006      	RJMP _0x2020015
                 _0x2020010:
000280 81aa      	LDD  R26,Y+2
000281 81bb      	LDD  R27,Y+2+1
000282 efef      	LDI  R30,LOW(65535)
000283 efff      	LDI  R31,HIGH(65535)
000284 93ed      	ST   X+,R30
000285 93fc      	ST   X,R31
                 _0x2020015:
000286 8119      	LDD  R17,Y+1
000287 8108      	LDD  R16,Y+0
000288 9625      	ADIW R28,5
000289 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
00028a 93ba      	ST   -Y,R27
00028b 93aa      	ST   -Y,R26
00028c 9726      	SBIW R28,6
00028d 940e 0571 	CALL __SAVELOCR6
00028f e010      	LDI  R17,0
000290 85ac      	LDD  R26,Y+12
000291 85bd      	LDD  R27,Y+12+1
000292 e0e0      	LDI  R30,LOW(0)
000293 e0f0      	LDI  R31,HIGH(0)
000294 93ed      	ST   X+,R30
000295 93fc      	ST   X,R31
                 _0x2020016:
000296 89ea      	LDD  R30,Y+18
000297 89fb      	LDD  R31,Y+18+1
000298 9631      	ADIW R30,1
000299 8bea      	STD  Y+18,R30
00029a 8bfb      	STD  Y+18+1,R31
00029b 9731      	SBIW R30,1
00029c 91e4      	LPM  R30,Z
00029d 2f2e      	MOV  R18,R30
00029e 30e0      	CPI  R30,0
00029f f409      	BRNE PC+2
0002a0 c115      	RJMP _0x2020018
0002a1 2fe1      	MOV  R30,R17
0002a2 30e0      	CPI  R30,0
0002a3 f439      	BRNE _0x202001C
0002a4 3225      	CPI  R18,37
0002a5 f411      	BRNE _0x202001D
0002a6 e011      	LDI  R17,LOW(1)
0002a7 c002      	RJMP _0x202001E
                 _0x202001D:
0002a8 940e 04a4 	CALL SUBOPT_0x3
                 _0x202001E:
0002aa c10a      	RJMP _0x202001B
                 _0x202001C:
0002ab 30e1      	CPI  R30,LOW(0x1)
0002ac f4a9      	BRNE _0x202001F
0002ad 3225      	CPI  R18,37
0002ae f419      	BRNE _0x2020020
0002af 940e 04a4 	CALL SUBOPT_0x3
0002b1 c102      	RJMP _0x20200CC
                 _0x2020020:
0002b2 e012      	LDI  R17,LOW(2)
0002b3 e040      	LDI  R20,LOW(0)
0002b4 e000      	LDI  R16,LOW(0)
0002b5 322d      	CPI  R18,45
0002b6 f411      	BRNE _0x2020021
0002b7 e001      	LDI  R16,LOW(1)
0002b8 c0fc      	RJMP _0x202001B
                 _0x2020021:
0002b9 322b      	CPI  R18,43
0002ba f411      	BRNE _0x2020022
0002bb e24b      	LDI  R20,LOW(43)
0002bc c0f8      	RJMP _0x202001B
                 _0x2020022:
0002bd 3220      	CPI  R18,32
0002be f411      	BRNE _0x2020023
0002bf e240      	LDI  R20,LOW(32)
0002c0 c0f4      	RJMP _0x202001B
                 _0x2020023:
0002c1 c002      	RJMP _0x2020024
                 _0x202001F:
0002c2 30e2      	CPI  R30,LOW(0x2)
0002c3 f439      	BRNE _0x2020025
                 _0x2020024:
0002c4 e050      	LDI  R21,LOW(0)
0002c5 e013      	LDI  R17,LOW(3)
0002c6 3320      	CPI  R18,48
0002c7 f411      	BRNE _0x2020026
0002c8 6800      	ORI  R16,LOW(128)
0002c9 c0eb      	RJMP _0x202001B
                 _0x2020026:
0002ca c003      	RJMP _0x2020027
                 _0x2020025:
0002cb 30e3      	CPI  R30,LOW(0x3)
0002cc f009      	BREQ PC+2
0002cd c0e7      	RJMP _0x202001B
                 _0x2020027:
0002ce 3320      	CPI  R18,48
0002cf f010      	BRLO _0x202002A
0002d0 332a      	CPI  R18,58
0002d1 f008      	BRLO _0x202002B
                 _0x202002A:
0002d2 c007      	RJMP _0x2020029
                 _0x202002B:
0002d3 e0aa      	LDI  R26,LOW(10)
0002d4 9f5a      	MUL  R21,R26
0002d5 2d50      	MOV  R21,R0
0002d6 2fe2      	MOV  R30,R18
0002d7 53e0      	SUBI R30,LOW(48)
0002d8 0f5e      	ADD  R21,R30
0002d9 c0db      	RJMP _0x202001B
                 _0x2020029:
0002da 2fe2      	MOV  R30,R18
0002db 36e3      	CPI  R30,LOW(0x63)
0002dc f449      	BRNE _0x202002F
0002dd 940e 04ab 	CALL SUBOPT_0x4
0002df 89e8      	LDD  R30,Y+16
0002e0 89f9      	LDD  R31,Y+16+1
0002e1 81a4      	LDD  R26,Z+4
0002e2 93aa      	ST   -Y,R26
0002e3 940e 04b1 	CALL SUBOPT_0x5
0002e5 c0ce      	RJMP _0x2020030
                 _0x202002F:
0002e6 37e3      	CPI  R30,LOW(0x73)
0002e7 f441      	BRNE _0x2020032
0002e8 940e 04ab 	CALL SUBOPT_0x4
0002ea 940e 04b7 	CALL SUBOPT_0x6
0002ec 940e 0460 	CALL _strlen
0002ee 2f1e      	MOV  R17,R30
0002ef c00a      	RJMP _0x2020033
                 _0x2020032:
0002f0 37e0      	CPI  R30,LOW(0x70)
0002f1 f461      	BRNE _0x2020035
0002f2 940e 04ab 	CALL SUBOPT_0x4
0002f4 940e 04b7 	CALL SUBOPT_0x6
0002f6 940e 046c 	CALL _strlenf
0002f8 2f1e      	MOV  R17,R30
0002f9 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0002fa 6002      	ORI  R16,LOW(2)
0002fb 770f      	ANDI R16,LOW(127)
0002fc e030      	LDI  R19,LOW(0)
0002fd c034      	RJMP _0x2020036
                 _0x2020035:
0002fe 36e4      	CPI  R30,LOW(0x64)
0002ff f011      	BREQ _0x2020039
000300 36e9      	CPI  R30,LOW(0x69)
000301 f411      	BRNE _0x202003A
                 _0x2020039:
000302 6004      	ORI  R16,LOW(4)
000303 c002      	RJMP _0x202003B
                 _0x202003A:
000304 37e5      	CPI  R30,LOW(0x75)
000305 f431      	BRNE _0x202003C
                 _0x202003B:
000306 e8ec      	LDI  R30,LOW(_tbl10_G101*2)
000307 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000308 83ee      	STD  Y+6,R30
000309 83ff      	STD  Y+6+1,R31
00030a e015      	LDI  R17,LOW(5)
00030b c00c      	RJMP _0x202003D
                 _0x202003C:
00030c 35e8      	CPI  R30,LOW(0x58)
00030d f411      	BRNE _0x202003F
00030e 6008      	ORI  R16,LOW(8)
00030f c003      	RJMP _0x2020040
                 _0x202003F:
000310 37e8      	CPI  R30,LOW(0x78)
000311 f009      	BREQ PC+2
000312 c0a1      	RJMP _0x2020071
                 _0x2020040:
000313 e9e6      	LDI  R30,LOW(_tbl16_G101*2)
000314 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000315 83ee      	STD  Y+6,R30
000316 83ff      	STD  Y+6+1,R31
000317 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000318 ff02      	SBRS R16,2
000319 c014      	RJMP _0x2020042
00031a 940e 04ab 	CALL SUBOPT_0x4
00031c 940e 04c1 	CALL SUBOPT_0x7
00031e 85ab      	LDD  R26,Y+11
00031f 23aa      	TST  R26
000320 f43a      	BRPL _0x2020043
000321 85ea      	LDD  R30,Y+10
000322 85fb      	LDD  R31,Y+10+1
000323 940e 0560 	CALL __ANEGW1
000325 87ea      	STD  Y+10,R30
000326 87fb      	STD  Y+10+1,R31
000327 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000328 3040      	CPI  R20,0
000329 f011      	BREQ _0x2020044
00032a 5f1f      	SUBI R17,-LOW(1)
00032b c001      	RJMP _0x2020045
                 _0x2020044:
00032c 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00032d c004      	RJMP _0x2020046
                 _0x2020042:
00032e 940e 04ab 	CALL SUBOPT_0x4
000330 940e 04c1 	CALL SUBOPT_0x7
                 _0x2020046:
                 _0x2020036:
000332 fd00      	SBRC R16,0
000333 c011      	RJMP _0x2020047
                 _0x2020048:
000334 1715      	CP   R17,R21
000335 f478      	BRSH _0x202004A
000336 ff07      	SBRS R16,7
000337 c008      	RJMP _0x202004B
000338 ff02      	SBRS R16,2
000339 c004      	RJMP _0x202004C
00033a 7f0b      	ANDI R16,LOW(251)
00033b 2f24      	MOV  R18,R20
00033c 5011      	SUBI R17,LOW(1)
00033d c001      	RJMP _0x202004D
                 _0x202004C:
00033e e320      	LDI  R18,LOW(48)
                 _0x202004D:
00033f c001      	RJMP _0x202004E
                 _0x202004B:
000340 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000341 940e 04a4 	CALL SUBOPT_0x3
000343 5051      	SUBI R21,LOW(1)
000344 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000345 2f31      	MOV  R19,R17
000346 ff01      	SBRS R16,1
000347 c017      	RJMP _0x202004F
                 _0x2020050:
000348 3030      	CPI  R19,0
000349 f0a1      	BREQ _0x2020052
00034a ff03      	SBRS R16,3
00034b c006      	RJMP _0x2020053
00034c 81ee      	LDD  R30,Y+6
00034d 81ff      	LDD  R31,Y+6+1
00034e 9125      	LPM  R18,Z+
00034f 83ee      	STD  Y+6,R30
000350 83ff      	STD  Y+6+1,R31
000351 c005      	RJMP _0x2020054
                 _0x2020053:
000352 81ae      	LDD  R26,Y+6
000353 81bf      	LDD  R27,Y+6+1
000354 912d      	LD   R18,X+
000355 83ae      	STD  Y+6,R26
000356 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000357 940e 04a4 	CALL SUBOPT_0x3
000359 3050      	CPI  R21,0
00035a f009      	BREQ _0x2020055
00035b 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00035c 5031      	SUBI R19,LOW(1)
00035d cfea      	RJMP _0x2020050
                 _0x2020052:
00035e c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00035f e320      	LDI  R18,LOW(48)
000360 81ee      	LDD  R30,Y+6
000361 81ff      	LDD  R31,Y+6+1
000362 940e 0568 	CALL __GETW1PF
000364 87e8      	STD  Y+8,R30
000365 87f9      	STD  Y+8+1,R31
000366 81ee      	LDD  R30,Y+6
000367 81ff      	LDD  R31,Y+6+1
000368 9632      	ADIW R30,2
000369 83ee      	STD  Y+6,R30
00036a 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00036b 85e8      	LDD  R30,Y+8
00036c 85f9      	LDD  R31,Y+8+1
00036d 85aa      	LDD  R26,Y+10
00036e 85bb      	LDD  R27,Y+10+1
00036f 17ae      	CP   R26,R30
000370 07bf      	CPC  R27,R31
000371 f050      	BRLO _0x202005C
000372 5f2f      	SUBI R18,-LOW(1)
000373 85a8      	LDD  R26,Y+8
000374 85b9      	LDD  R27,Y+8+1
000375 85ea      	LDD  R30,Y+10
000376 85fb      	LDD  R31,Y+10+1
000377 1bea      	SUB  R30,R26
000378 0bfb      	SBC  R31,R27
000379 87ea      	STD  Y+10,R30
00037a 87fb      	STD  Y+10+1,R31
00037b cfef      	RJMP _0x202005A
                 _0x202005C:
00037c 332a      	CPI  R18,58
00037d f028      	BRLO _0x202005D
00037e ff03      	SBRS R16,3
00037f c002      	RJMP _0x202005E
000380 5f29      	SUBI R18,-LOW(7)
000381 c001      	RJMP _0x202005F
                 _0x202005E:
000382 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000383 fd04      	SBRC R16,4
000384 c01a      	RJMP _0x2020061
000385 3321      	CPI  R18,49
000386 f420      	BRSH _0x2020063
000387 85a8      	LDD  R26,Y+8
000388 85b9      	LDD  R27,Y+8+1
000389 9711      	SBIW R26,1
00038a f409      	BRNE _0x2020062
                 _0x2020063:
00038b c009      	RJMP _0x20200CD
                 _0x2020062:
00038c 1753      	CP   R21,R19
00038d f010      	BRLO _0x2020067
00038e ff00      	SBRS R16,0
00038f c001      	RJMP _0x2020068
                 _0x2020067:
000390 c013      	RJMP _0x2020066
                 _0x2020068:
000391 e220      	LDI  R18,LOW(32)
000392 ff07      	SBRS R16,7
000393 c00b      	RJMP _0x2020069
000394 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000395 6100      	ORI  R16,LOW(16)
000396 ff02      	SBRS R16,2
000397 c007      	RJMP _0x202006A
000398 7f0b      	ANDI R16,LOW(251)
000399 934a      	ST   -Y,R20
00039a 940e 04b1 	CALL SUBOPT_0x5
00039c 3050      	CPI  R21,0
00039d f009      	BREQ _0x202006B
00039e 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00039f 940e 04a4 	CALL SUBOPT_0x3
0003a1 3050      	CPI  R21,0
0003a2 f009      	BREQ _0x202006C
0003a3 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0003a4 5031      	SUBI R19,LOW(1)
0003a5 85a8      	LDD  R26,Y+8
0003a6 85b9      	LDD  R27,Y+8+1
0003a7 9712      	SBIW R26,2
0003a8 f008      	BRLO _0x2020059
0003a9 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0003aa ff00      	SBRS R16,0
0003ab c008      	RJMP _0x202006D
                 _0x202006E:
0003ac 3050      	CPI  R21,0
0003ad f031      	BREQ _0x2020070
0003ae 5051      	SUBI R21,LOW(1)
0003af e2e0      	LDI  R30,LOW(32)
0003b0 93ea      	ST   -Y,R30
0003b1 940e 04b1 	CALL SUBOPT_0x5
0003b3 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0003b4 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0003b5 cee0      	RJMP _0x2020016
                 _0x2020018:
0003b6 85ac      	LDD  R26,Y+12
0003b7 85bd      	LDD  R27,Y+12+1
0003b8 940e 0564 	CALL __GETW1P
0003ba 940e 0578 	CALL __LOADLOCR6
0003bc 9664      	ADIW R28,20
0003bd 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003be 92ff      	PUSH R15
0003bf 2ef8      	MOV  R15,R24
0003c0 9726      	SBIW R28,6
0003c1 940e 0573 	CALL __SAVELOCR4
0003c3 940e 04c9 	CALL SUBOPT_0x8
0003c5 9730      	SBIW R30,0
0003c6 f419      	BRNE _0x2020072
0003c7 efef      	LDI  R30,LOW(65535)
0003c8 efff      	LDI  R31,HIGH(65535)
0003c9 c023      	RJMP _0x20C0003
                 _0x2020072:
0003ca 01de      	MOVW R26,R28
0003cb 9616      	ADIW R26,6
0003cc 940e 055c 	CALL __ADDW2R15
0003ce 018d      	MOVW R16,R26
0003cf 940e 04c9 	CALL SUBOPT_0x8
0003d1 83ee      	STD  Y+6,R30
0003d2 83ff      	STD  Y+6+1,R31
0003d3 e0e0      	LDI  R30,LOW(0)
0003d4 87e8      	STD  Y+8,R30
0003d5 87e9      	STD  Y+8+1,R30
0003d6 01de      	MOVW R26,R28
0003d7 961a      	ADIW R26,10
0003d8 940e 055c 	CALL __ADDW2R15
0003da 940e 0564 	CALL __GETW1P
0003dc 93fa      	ST   -Y,R31
0003dd 93ea      	ST   -Y,R30
0003de 931a      	ST   -Y,R17
0003df 930a      	ST   -Y,R16
0003e0 e4ea      	LDI  R30,LOW(_put_buff_G101)
0003e1 e0f2      	LDI  R31,HIGH(_put_buff_G101)
0003e2 93fa      	ST   -Y,R31
0003e3 93ea      	ST   -Y,R30
0003e4 01de      	MOVW R26,R28
0003e5 961a      	ADIW R26,10
0003e6 dea3      	RCALL __print_G101
0003e7 019f      	MOVW R18,R30
0003e8 81ae      	LDD  R26,Y+6
0003e9 81bf      	LDD  R27,Y+6+1
0003ea e0e0      	LDI  R30,LOW(0)
0003eb 93ec      	ST   X,R30
0003ec 01f9      	MOVW R30,R18
                 _0x20C0003:
0003ed 940e 057a 	CALL __LOADLOCR4
0003ef 962a      	ADIW R28,10
0003f0 90ff      	POP  R15
0003f1 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _rtc_init:
                 ; .FSTART _rtc_init
0003f2 93aa      	ST   -Y,R26
0003f3 81ea      	LDD  R30,Y+2
0003f4 70e3      	ANDI R30,LOW(0x3)
0003f5 83ea      	STD  Y+2,R30
0003f6 81e9      	LDD  R30,Y+1
0003f7 30e0      	CPI  R30,0
0003f8 f019      	BREQ _0x2040003
0003f9 81ea      	LDD  R30,Y+2
0003fa 61e0      	ORI  R30,0x10
0003fb 83ea      	STD  Y+2,R30
                 _0x2040003:
0003fc 81e8      	LD   R30,Y
0003fd 30e0      	CPI  R30,0
0003fe f019      	BREQ _0x2040004
0003ff 81ea      	LDD  R30,Y+2
000400 68e0      	ORI  R30,0x80
000401 83ea      	STD  Y+2,R30
                 _0x2040004:
000402 940e 04d0 	CALL SUBOPT_0x9
000404 e0a7      	LDI  R26,LOW(7)
000405 940e 053a 	CALL _i2c_write
000407 81aa      	LDD  R26,Y+2
000408 c023      	RJMP _0x20C0001
                 ; .FEND
                 _rtc_get_time:
                 ; .FSTART _rtc_get_time
000409 93ba      	ST   -Y,R27
00040a 93aa      	ST   -Y,R26
00040b 940e 04d0 	CALL SUBOPT_0x9
00040d e0a0      	LDI  R26,LOW(0)
00040e 940e 04d5 	CALL SUBOPT_0xA
000410 940e 04e1 	CALL SUBOPT_0xB
000412 940e 04e8 	CALL SUBOPT_0xC
000414 940e 04ee 	CALL SUBOPT_0xD
000416 2fae      	MOV  R26,R30
000417 940e 0479 	CALL _bcd2bin
000419 81ac      	LDD  R26,Y+4
00041a 81bd      	LDD  R27,Y+4+1
00041b 93ec      	ST   X,R30
00041c 940e 0515 	CALL _i2c_stop
00041e 9626      	ADIW R28,6
00041f 9508      	RET
                 ; .FEND
                 _rtc_set_time:
                 ; .FSTART _rtc_set_time
000420 93aa      	ST   -Y,R26
000421 940e 04d0 	CALL SUBOPT_0x9
000423 e0a0      	LDI  R26,LOW(0)
000424 940e 04f4 	CALL SUBOPT_0xE
000426 81a9      	LDD  R26,Y+1
000427 940e 0486 	CALL _bin2bcd
000429 2fae      	MOV  R26,R30
00042a 940e 04fb 	CALL SUBOPT_0xF
                 _0x20C0001:
00042c 940e 053a 	CALL _i2c_write
00042e 940e 0515 	CALL _i2c_stop
                 _0x20C0002:
000430 9623      	ADIW R28,3
000431 9508      	RET
                 ; .FEND
                 _rtc_get_date:
                 ; .FSTART _rtc_get_date
000432 93ba      	ST   -Y,R27
000433 93aa      	ST   -Y,R26
000434 940e 04d0 	CALL SUBOPT_0x9
000436 e0a3      	LDI  R26,LOW(3)
000437 940e 04d5 	CALL SUBOPT_0xA
000439 81ae      	LDD  R26,Y+6
00043a 81bf      	LDD  R27,Y+6+1
00043b 93ec      	ST   X,R30
00043c 940e 04e8 	CALL SUBOPT_0xC
00043e 81ac      	LDD  R26,Y+4
00043f 81bd      	LDD  R27,Y+4+1
000440 93ec      	ST   X,R30
000441 940e 04e8 	CALL SUBOPT_0xC
000443 940e 04ee 	CALL SUBOPT_0xD
000445 940e 04e1 	CALL SUBOPT_0xB
000447 940e 0515 	CALL _i2c_stop
000449 9628      	ADIW R28,8
00044a 9508      	RET
                 ; .FEND
                 _rtc_set_date:
                 ; .FSTART _rtc_set_date
00044b 93aa      	ST   -Y,R26
00044c 940e 04d0 	CALL SUBOPT_0x9
00044e e0a3      	LDI  R26,LOW(3)
00044f 940e 053a 	CALL _i2c_write
000451 81ab      	LDD  R26,Y+3
000452 940e 04fb 	CALL SUBOPT_0xF
000454 940e 053a 	CALL _i2c_write
000456 81a9      	LDD  R26,Y+1
000457 940e 0486 	CALL _bin2bcd
000459 2fae      	MOV  R26,R30
00045a 940e 04f4 	CALL SUBOPT_0xE
00045c 940e 0515 	CALL _i2c_stop
00045e 9624      	ADIW R28,4
00045f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000460 93ba      	ST   -Y,R27
000461 93aa      	ST   -Y,R26
000462 91a9          ld   r26,y+
000463 91b9          ld   r27,y+
000464 27ee          clr  r30
000465 27ff          clr  r31
                 strlen0:
000466 916d          ld   r22,x+
000467 2366          tst  r22
000468 f011          breq strlen1
000469 9631          adiw r30,1
00046a cffb          rjmp strlen0
                 strlen1:
00046b 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00046c 93ba      	ST   -Y,R27
00046d 93aa      	ST   -Y,R26
00046e 27aa          clr  r26
00046f 27bb          clr  r27
000470 91e9          ld   r30,y+
000471 91f9          ld   r31,y+
                 strlenf0:
000472 9005      	lpm  r0,z+
000473 2000          tst  r0
000474 f011          breq strlenf1
000475 9611          adiw r26,1
000476 cffb          rjmp strlenf0
                 strlenf1:
000477 01fd          movw r30,r26
000478 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _bcd2bin:
                 ; .FSTART _bcd2bin
000479 93aa      	ST   -Y,R26
00047a 81e8          ld   r30,y
00047b 95e2          swap r30
00047c 70ef          andi r30,0xf
00047d 2fae          mov  r26,r30
00047e 0faa          lsl  r26
00047f 0faa          lsl  r26
000480 0fea          add  r30,r26
000481 0fee          lsl  r30
000482 91a9          ld   r26,y+
000483 70af          andi r26,0xf
000484 0fea          add  r30,r26
000485 9508          ret
                 ; .FEND
                 _bin2bcd:
                 ; .FSTART _bin2bcd
000486 93aa      	ST   -Y,R26
000487 91a9          ld   r26,y+
000488 27ee          clr  r30
                 bin2bcd0:
000489 50aa          subi r26,10
00048a f012          brmi bin2bcd1
00048b 5fe0          subi r30,-16
00048c cffc          rjmp bin2bcd0
                 bin2bcd1:
00048d 5fa6          subi r26,-10
00048e 0fea          add  r30,r26
00048f 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _weekday:
000526           	.BYTE 0x1
                 _weekdays:
000527           	.BYTE 0x10
                 __base_y_G100:
000537           	.BYTE 0x4
                 __lcd_x:
00053b           	.BYTE 0x1
                 __lcd_y:
00053c           	.BYTE 0x1
                 __lcd_maxx:
00053d           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x0:
000490 27ff      	CLR  R31
000491 2766      	CLR  R22
000492 2777      	CLR  R23
000493 940e 056c 	CALL __PUTPARD1
000495 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000496 940e 01bf 	CALL __lcd_write_data
000498 e0a3      	LDI  R26,LOW(3)
000499 e0b0      	LDI  R27,0
00049a 940c 0552 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
00049c e3a0      	LDI  R26,LOW(48)
00049d 940e 019a 	CALL __lcd_write_nibble_G100
                +
00049f ec88     +LDI R24 , LOW ( 200 )
0004a0 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004a1 9701     +SBIW R24 , 1
0004a2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
0004a4 932a      	ST   -Y,R18
0004a5 85ad      	LDD  R26,Y+13
0004a6 85be      	LDD  R27,Y+13+1
0004a7 85ef      	LDD  R30,Y+15
0004a8 89f8      	LDD  R31,Y+15+1
0004a9 9509      	ICALL
0004aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
0004ab 89e8      	LDD  R30,Y+16
0004ac 89f9      	LDD  R31,Y+16+1
0004ad 9734      	SBIW R30,4
0004ae 8be8      	STD  Y+16,R30
0004af 8bf9      	STD  Y+16+1,R31
0004b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0004b1 85ad      	LDD  R26,Y+13
0004b2 85be      	LDD  R27,Y+13+1
0004b3 85ef      	LDD  R30,Y+15
0004b4 89f8      	LDD  R31,Y+15+1
0004b5 9509      	ICALL
0004b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
0004b7 89a8      	LDD  R26,Y+16
0004b8 89b9      	LDD  R27,Y+16+1
0004b9 9614      	ADIW R26,4
0004ba 940e 0564 	CALL __GETW1P
0004bc 83ee      	STD  Y+6,R30
0004bd 83ff      	STD  Y+6+1,R31
0004be 81ae      	LDD  R26,Y+6
0004bf 81bf      	LDD  R27,Y+6+1
0004c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
0004c1 89a8      	LDD  R26,Y+16
0004c2 89b9      	LDD  R27,Y+16+1
0004c3 9614      	ADIW R26,4
0004c4 940e 0564 	CALL __GETW1P
0004c6 87ea      	STD  Y+10,R30
0004c7 87fb      	STD  Y+10+1,R31
0004c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0004c9 01de      	MOVW R26,R28
0004ca 961c      	ADIW R26,12
0004cb 940e 055c 	CALL __ADDW2R15
0004cd 940e 0564 	CALL __GETW1P
0004cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
0004d0 940e 0506 	CALL _i2c_start
0004d2 eda0      	LDI  R26,LOW(208)
0004d3 940c 053a 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
0004d5 940e 053a 	CALL _i2c_write
0004d7 940e 0515 	CALL _i2c_stop
0004d9 940e 0506 	CALL _i2c_start
0004db eda1      	LDI  R26,LOW(209)
0004dc 940e 053a 	CALL _i2c_write
0004de e0a1      	LDI  R26,LOW(1)
0004df 940c 051f 	JMP  _i2c_read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0004e1 2fae      	MOV  R26,R30
0004e2 940e 0479 	CALL _bcd2bin
0004e4 81a8      	LD   R26,Y
0004e5 81b9      	LDD  R27,Y+1
0004e6 93ec      	ST   X,R30
0004e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xC:
0004e8 e0a1      	LDI  R26,LOW(1)
0004e9 940e 051f 	CALL _i2c_read
0004eb 2fae      	MOV  R26,R30
0004ec 940c 0479 	JMP  _bcd2bin
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0004ee 81aa      	LDD  R26,Y+2
0004ef 81bb      	LDD  R27,Y+2+1
0004f0 93ec      	ST   X,R30
0004f1 e0a0      	LDI  R26,LOW(0)
0004f2 940c 051f 	JMP  _i2c_read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
0004f4 940e 053a 	CALL _i2c_write
0004f6 81a8      	LD   R26,Y
0004f7 df8e      	RCALL _bin2bcd
0004f8 2fae      	MOV  R26,R30
0004f9 940c 053a 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
0004fb 940e 053a 	CALL _i2c_write
0004fd 81aa      	LDD  R26,Y+2
0004fe df87      	RCALL _bin2bcd
0004ff 2fae      	MOV  R26,R30
000500 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x12 ;PORTD
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
000501 9890      	cbi  __i2c_port,__scl_bit
000502 9891      	cbi  __i2c_port,__sda_bit
000503 9a88      	sbi  __i2c_dir,__scl_bit
000504 9889      	cbi  __i2c_dir,__sda_bit
000505 c015      	rjmp __i2c_delay2
                 _i2c_start:
000506 9889      	cbi  __i2c_dir,__sda_bit
000507 9888      	cbi  __i2c_dir,__scl_bit
000508 27ee      	clr  r30
000509 0000      	nop
00050a 9b81      	sbis __i2c_pin,__sda_bit
00050b 9508      	ret
00050c 9b80      	sbis __i2c_pin,__scl_bit
00050d 9508      	ret
00050e d004      	rcall __i2c_delay1
00050f 9a89      	sbi  __i2c_dir,__sda_bit
000510 d002      	rcall __i2c_delay1
000511 9a88      	sbi  __i2c_dir,__scl_bit
000512 e0e1      	ldi  r30,1
                 __i2c_delay1:
000513 e06d      	ldi  r22,13
000514 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000515 9a89      	sbi  __i2c_dir,__sda_bit
000516 9a88      	sbi  __i2c_dir,__scl_bit
000517 d003      	rcall __i2c_delay2
000518 9888      	cbi  __i2c_dir,__scl_bit
000519 dff9      	rcall __i2c_delay1
00051a 9889      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
00051b e16b      	ldi  r22,27
                 __i2c_delay2l:
00051c 956a      	dec  r22
00051d f7f1      	brne __i2c_delay2l
00051e 9508      	ret
                 _i2c_read:
00051f e078      	ldi  r23,8
                 __i2c_read0:
000520 9888      	cbi  __i2c_dir,__scl_bit
000521 dff1      	rcall __i2c_delay1
                 __i2c_read3:
000522 9b80      	sbis __i2c_pin,__scl_bit
000523 cffe      	rjmp __i2c_read3
000524 dfee      	rcall __i2c_delay1
000525 9488      	clc
000526 9981      	sbic __i2c_pin,__sda_bit
000527 9408      	sec
000528 9a88      	sbi  __i2c_dir,__scl_bit
000529 dff1      	rcall __i2c_delay2
00052a 1fee      	rol  r30
00052b 957a      	dec  r23
00052c f799      	brne __i2c_read0
00052d 2f7a      	mov  r23,r26
00052e 2377      	tst  r23
00052f f411      	brne __i2c_read1
000530 9889      	cbi  __i2c_dir,__sda_bit
000531 c001      	rjmp __i2c_read2
                 __i2c_read1:
000532 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
000533 dfdf      	rcall __i2c_delay1
000534 9888      	cbi  __i2c_dir,__scl_bit
000535 dfe5      	rcall __i2c_delay2
000536 9a88      	sbi  __i2c_dir,__scl_bit
000537 dfdb      	rcall __i2c_delay1
000538 9889      	cbi  __i2c_dir,__sda_bit
000539 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
00053a e078      	ldi  r23,8
                 __i2c_write0:
00053b 0faa      	lsl  r26
00053c f410      	brcc __i2c_write1
00053d 9889      	cbi  __i2c_dir,__sda_bit
00053e c001      	rjmp __i2c_write2
                 __i2c_write1:
00053f 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
000540 dfda      	rcall __i2c_delay2
000541 9888      	cbi  __i2c_dir,__scl_bit
000542 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
000543 9b80      	sbis __i2c_pin,__scl_bit
000544 cffe      	rjmp __i2c_write3
000545 dfcd      	rcall __i2c_delay1
000546 9a88      	sbi  __i2c_dir,__scl_bit
000547 957a      	dec  r23
000548 f791      	brne __i2c_write0
000549 9889      	cbi  __i2c_dir,__sda_bit
00054a dfc8      	rcall __i2c_delay1
00054b 9888      	cbi  __i2c_dir,__scl_bit
00054c dfce      	rcall __i2c_delay2
00054d e0e1      	ldi  r30,1
00054e 9981      	sbic __i2c_pin,__sda_bit
00054f 27ee      	clr  r30
000550 9a88      	sbi  __i2c_dir,__scl_bit
000551 cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
000552 9610      	adiw r26,0
000553 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000554 ed80     +LDI R24 , LOW ( 0x7D0 )
000555 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000556 9701     +SBIW R24 , 1
000557 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000558 95a8      	wdr
000559 9711      	sbiw r26,1
00055a f7c9      	brne __delay_ms0
                 __delay_ms1:
00055b 9508      	ret
                 
                 __ADDW2R15:
00055c 2400      	CLR  R0
00055d 0daf      	ADD  R26,R15
00055e 1db0      	ADC  R27,R0
00055f 9508      	RET
                 
                 __ANEGW1:
000560 95f1      	NEG  R31
000561 95e1      	NEG  R30
000562 40f0      	SBCI R31,0
000563 9508      	RET
                 
                 __GETW1P:
000564 91ed      	LD   R30,X+
000565 91fc      	LD   R31,X
000566 9711      	SBIW R26,1
000567 9508      	RET
                 
                 __GETW1PF:
000568 9005      	LPM  R0,Z+
000569 91f4      	LPM  R31,Z
00056a 2de0      	MOV  R30,R0
00056b 9508      	RET
                 
                 __PUTPARD1:
00056c 937a      	ST   -Y,R23
00056d 936a      	ST   -Y,R22
00056e 93fa      	ST   -Y,R31
00056f 93ea      	ST   -Y,R30
000570 9508      	RET
                 
                 __SAVELOCR6:
000571 935a      	ST   -Y,R21
                 __SAVELOCR5:
000572 934a      	ST   -Y,R20
                 __SAVELOCR4:
000573 933a      	ST   -Y,R19
                 __SAVELOCR3:
000574 932a      	ST   -Y,R18
                 __SAVELOCR2:
000575 931a      	ST   -Y,R17
000576 930a      	ST   -Y,R16
000577 9508      	RET
                 
                 __LOADLOCR6:
000578 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000579 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00057a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00057b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00057c 8119      	LDD  R17,Y+1
00057d 8108      	LD   R16,Y
00057e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   2 r5 :   1 r6 :   5 r7 :   3 
r8 :   1 r9 :   1 r10:   3 r11:   1 r12:   1 r13:   1 r14:   0 r15:   4 
r16:  34 r17:  27 r18:  29 r19:   8 r20:   9 r21:  17 r22:  10 r23:   9 
r24:  25 r25:   5 r26: 167 r27:  50 r28:  23 r29:   1 r30: 259 r31:  81 
x  :  28 y  : 236 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   7 
adiw  :  31 and   :   0 andi  :  11 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  24 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   0 brmi  :   2 brne  :  36 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 102 
cbi   :  24 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  19 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   4 cpi   :  38 cpse  :   0 dec   :   8 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   1 inc   :   0 jmp   :  43 ld    :  40 ldd   :  93 
ldi   : 145 lds   :   9 lpm   :  14 lsl   :   5 lsr   :   0 mov   :  29 
movw  :  21 mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   1 
or    :   0 ori   :   8 out   :   8 pop   :   1 push  :   1 rcall :  40 
ret   :  35 reti  :   1 rjmp  :  76 rol   :   2 ror   :   0 sbc   :   1 
sbci  :   2 sbi   :  24 sbic  :   2 sbis  :   4 sbiw  :  20 sbr   :   0 
sbrc  :   2 sbrs  :  10 sec   :   1 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 100 std   :  34 sts   :  12 sub   :   1 subi  :  22 
swap  :   2 tst   :   5 wdr   :   1 
Instructions used: 61 out of 117 (52.1%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000afe   2636    178   2814  131072   2.1%
[.dseg] 0x000100 0x00053e      0     62     62    4096   1.5%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 11 warnings
