
AVRASM ver. 2.1.30  C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\bai11\Debug\List\bai_11.asm Sun Nov 24 15:14:57 2024

C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\bai11\Debug\List\bai_11.asm(1090): warning: Register r4 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\bai11\Debug\List\bai_11.asm(1091): warning: Register r5 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\bai11\Debug\List\bai_11.asm(1092): warning: Register r6 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\bai11\Debug\List\bai_11.asm(1093): warning: Register r7 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\bai11\Debug\List\bai_11.asm(1094): warning: Register r9 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\bai11\Debug\List\bai_11.asm(1095): warning: Register r8 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\bai11\Debug\List\bai_11.asm(1096): warning: Register r11 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\bai11\Debug\List\bai_11.asm(1097): warning: Register r12 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\bai11\Debug\List\bai_11.asm(1098): warning: Register r13 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\bai11\Debug\List\bai_11.asm(1099): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _d=R4
                 	.DEF _d_msb=R5
                 	.DEF _dem=R6
                 	.DEF _dem_msb=R7
                 	.DEF _hour=R9
                 	.DEF _minute=R8
                 	.DEF _second=R11
                 	.DEF _hour_1=R12
                 	.DEF _hour_1_msb=R13
                 	.DEF __lcd_x=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0054 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0084 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x2000003:
00004f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000050 0002      	.DW  0x02
000051 0506      	.DW  __base_y_G100
000052 009e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000053 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000054 94f8      	CLI
000055 27ee      	CLR  R30
000056 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000057 e0f1      	LDI  R31,1
000058 bff5      	OUT  MCUCR,R31
000059 bfe5      	OUT  MCUCR,R30
00005a 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00005c e08d      	LDI  R24,(14-2)+1
00005d e0a2      	LDI  R26,2
00005e 27bb      	CLR  R27
                 __CLEAR_REG:
00005f 93ed      	ST   X+,R30
000060 958a      	DEC  R24
000061 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000062 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000063 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000064 e0a0      	LDI  R26,LOW(__SRAM_START)
000065 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000066 93ed      	ST   X+,R30
000067 9701      	SBIW R24,1
000068 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000069 eae0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006b 9185      	LPM  R24,Z+
00006c 9195      	LPM  R25,Z+
00006d 9700      	SBIW R24,0
00006e f061      	BREQ __GLOBAL_INI_END
00006f 91a5      	LPM  R26,Z+
000070 91b5      	LPM  R27,Z+
000071 9005      	LPM  R0,Z+
000072 9015      	LPM  R1,Z+
000073 01bf      	MOVW R22,R30
000074 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000075 9005      	LPM  R0,Z+
000076 920d      	ST   X+,R0
000077 9701      	SBIW R24,1
000078 f7e1      	BRNE __GLOBAL_INI_LOOP
000079 01fb      	MOVW R30,R22
00007a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00007b bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007c efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007d bfed      	OUT  SPL,R30
00007e e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000080 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000081 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000082 940c 0122 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * bai_11.c
                 ; *
                 ; * Created: 24/10/27 2:35:53 PM
                 ; * Author: ADMIN
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <i2c.h>
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;#include <ds1307.h>
                 ;int d;
                 ;unsigned int dem;
                 ;unsigned char hour, minute, second;
                 ;int hour_1, hour_2, min_1, min_2;
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void){
                 ; 0000 0014 interrupt[17] void timer0_ovf_isr(void){
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000084 93ea      	ST   -Y,R30
000085 93fa      	ST   -Y,R31
000086 b7ef      	IN   R30,SREG
000087 93ea      	ST   -Y,R30
                 ; 0000 0015     TCNT0 = 0x66;
000088 e6e6      	LDI  R30,LOW(102)
000089 bfe2      	OUT  0x32,R30
                 ; 0000 0016     dem++;
00008a 01f3      	MOVW R30,R6
00008b 9631      	ADIW R30,1
00008c 013f      	MOVW R6,R30
                 ; 0000 0017     if(dem == 1000) d = 1;
00008d eee8      	LDI  R30,LOW(1000)
00008e e0f3      	LDI  R31,HIGH(1000)
00008f 15e6      	CP   R30,R6
000090 05f7      	CPC  R31,R7
000091 f419      	BRNE _0x3
000092 e0e1      	LDI  R30,LOW(1)
000093 e0f0      	LDI  R31,HIGH(1)
000094 012f      	MOVW R4,R30
                 ; 0000 0018     if(dem == 2000){
                 _0x3:
000095 ede0      	LDI  R30,LOW(2000)
000096 e0f7      	LDI  R31,HIGH(2000)
000097 15e6      	CP   R30,R6
000098 05f7      	CPC  R31,R7
000099 f421      	BRNE _0x4
                 ; 0000 0019         dem = 0;
00009a 2466      	CLR  R6
00009b 2477      	CLR  R7
                 ; 0000 001A         d = 0;
00009c 2444      	CLR  R4
00009d 2455      	CLR  R5
                 ; 0000 001B     }
                 ; 0000 001C 
                 ; 0000 001D }
                 _0x4:
00009e 91e9      	LD   R30,Y+
00009f bfef      	OUT  SREG,R30
0000a0 91f9      	LD   R31,Y+
0000a1 91e9      	LD   R30,Y+
0000a2 9518      	RETI
                 ; .FEND
                 ;void hienThi(int i, unsigned int j){
                 ; 0000 001E void hienThi(int i, unsigned int j){
                 _hienThi:
                 ; .FSTART _hienThi
                 ; 0000 001F     if(i == 0){
0000a3 93ba      	ST   -Y,R27
0000a4 93aa      	ST   -Y,R26
                 ;	i -> Y+2
                 ;	j -> Y+0
0000a5 81ea      	LDD  R30,Y+2
0000a6 81fb      	LDD  R31,Y+2+1
0000a7 9730      	SBIW R30,0
0000a8 f431      	BRNE _0x5
                 ; 0000 0020         PORTF = 0x80 + j;
0000a9 940e 027e 	CALL SUBOPT_0x0
                 ; 0000 0021         PORTD = 0xF9;
0000ab efe9      	LDI  R30,LOW(249)
0000ac bbe2      	OUT  0x12,R30
                 ; 0000 0022         PORTA = 0x7F;
0000ad e7ef      	LDI  R30,LOW(127)
0000ae bbeb      	OUT  0x1B,R30
                 ; 0000 0023     }
                 ; 0000 0024     if(i == 1){
                 _0x5:
0000af 81aa      	LDD  R26,Y+2
0000b0 81bb      	LDD  R27,Y+2+1
0000b1 9711      	SBIW R26,1
0000b2 f421      	BRNE _0x6
                 ; 0000 0025         PORTF = 0x86 + j;
0000b3 81e8      	LD   R30,Y
0000b4 57ea      	SUBI R30,-LOW(134)
0000b5 940e 0283 	CALL SUBOPT_0x1
                 ; 0000 0026         PORTD = 0xFF;
                 ; 0000 0027         PORTA = 0x7F;
                 ; 0000 0028     }
                 ; 0000 0029     if(i == 2){
                 _0x6:
0000b7 81aa      	LDD  R26,Y+2
0000b8 81bb      	LDD  R27,Y+2+1
0000b9 9712      	SBIW R26,2
0000ba f441      	BRNE _0x7
                 ; 0000 002A         PORTF = 0x84 + j;
0000bb 81e8      	LD   R30,Y
0000bc 57ec      	SUBI R30,-LOW(132)
0000bd 93e0 0062 	STS  98,R30
                 ; 0000 002B         PORTD = 0xF1;
0000bf efe1      	LDI  R30,LOW(241)
0000c0 bbe2      	OUT  0x12,R30
                 ; 0000 002C         PORTA = 0xFF;
0000c1 efef      	LDI  R30,LOW(255)
0000c2 bbeb      	OUT  0x1B,R30
                 ; 0000 002D     }
                 ; 0000 002E     if(i == 3){
                 _0x7:
0000c3 81aa      	LDD  R26,Y+2
0000c4 81bb      	LDD  R27,Y+2+1
0000c5 9713      	SBIW R26,3
0000c6 f451      	BRNE _0x8
                 ; 0000 002F         PORTF = 0x84 + j;
0000c7 81e8      	LD   R30,Y
0000c8 57ec      	SUBI R30,-LOW(132)
0000c9 93e0 0062 	STS  98,R30
                 ; 0000 0030         PORTD = 0xF5;
0000cb efe5      	LDI  R30,LOW(245)
0000cc bbe2      	OUT  0x12,R30
                 ; 0000 0031         PORTE = 0x00;
0000cd e0e0      	LDI  R30,LOW(0)
0000ce b9e3      	OUT  0x3,R30
                 ; 0000 0032         PORTA = 0x7F;
0000cf e7ef      	LDI  R30,LOW(127)
0000d0 bbeb      	OUT  0x1B,R30
                 ; 0000 0033     }
                 ; 0000 0034     if(i == 4){
                 _0x8:
0000d1 81aa      	LDD  R26,Y+2
0000d2 81bb      	LDD  R27,Y+2+1
0000d3 9714      	SBIW R26,4
0000d4 f441      	BRNE _0x9
                 ; 0000 0035         PORTF = 0x82 + j;
0000d5 81e8      	LD   R30,Y
0000d6 57ee      	SUBI R30,-LOW(130)
0000d7 93e0 0062 	STS  98,R30
                 ; 0000 0036         PORTD = 0xF7;
0000d9 efe7      	LDI  R30,LOW(247)
0000da bbe2      	OUT  0x12,R30
                 ; 0000 0037         PORTA = 0x7F;
0000db e7ef      	LDI  R30,LOW(127)
0000dc bbeb      	OUT  0x1B,R30
                 ; 0000 0038     }
                 ; 0000 0039     if(i == 5){
                 _0x9:
0000dd 81aa      	LDD  R26,Y+2
0000de 81bb      	LDD  R27,Y+2+1
0000df 9715      	SBIW R26,5
0000e0 f441      	BRNE _0xA
                 ; 0000 003A     PORTF = 0xA0 + j;
0000e1 81e8      	LD   R30,Y
0000e2 56e0      	SUBI R30,-LOW(160)
0000e3 93e0 0062 	STS  98,R30
                 ; 0000 003B     PORTD = 0xF5;
0000e5 efe5      	LDI  R30,LOW(245)
0000e6 bbe2      	OUT  0x12,R30
                 ; 0000 003C     PORTA = 0x7F;
0000e7 e7ef      	LDI  R30,LOW(127)
0000e8 bbeb      	OUT  0x1B,R30
                 ; 0000 003D     }
                 ; 0000 003E     if(i == 6){
                 _0xA:
0000e9 81aa      	LDD  R26,Y+2
0000ea 81bb      	LDD  R27,Y+2+1
0000eb 9716      	SBIW R26,6
0000ec f441      	BRNE _0xB
                 ; 0000 003F         PORTF = 0xA0 + j;
0000ed 81e8      	LD   R30,Y
0000ee 56e0      	SUBI R30,-LOW(160)
0000ef 93e0 0062 	STS  98,R30
                 ; 0000 0040         PORTD = 0xF1;
0000f1 efe1      	LDI  R30,LOW(241)
0000f2 bbe2      	OUT  0x12,R30
                 ; 0000 0041         PORTA = 0x7F;
0000f3 e7ef      	LDI  R30,LOW(127)
0000f4 bbeb      	OUT  0x1B,R30
                 ; 0000 0042     }
                 ; 0000 0043     if(i == 7){
                 _0xB:
0000f5 81aa      	LDD  R26,Y+2
0000f6 81bb      	LDD  R27,Y+2+1
0000f7 9717      	SBIW R26,7
0000f8 f421      	BRNE _0xC
                 ; 0000 0044         PORTF = 0x84 + j;
0000f9 81e8      	LD   R30,Y
0000fa 57ec      	SUBI R30,-LOW(132)
0000fb 940e 0283 	CALL SUBOPT_0x1
                 ; 0000 0045         PORTD = 0xFF;
                 ; 0000 0046         PORTA = 0x7F;
                 ; 0000 0047     }
                 ; 0000 0048     if(i == 8){
                 _0xC:
0000fd 81aa      	LDD  R26,Y+2
0000fe 81bb      	LDD  R27,Y+2+1
0000ff 9718      	SBIW R26,8
000100 f431      	BRNE _0xD
                 ; 0000 0049         PORTF = 0x80 + j;
000101 940e 027e 	CALL SUBOPT_0x0
                 ; 0000 004A         PORTD = 0xF1;
000103 efe1      	LDI  R30,LOW(241)
000104 bbe2      	OUT  0x12,R30
                 ; 0000 004B         PORTA = 0x7F;
000105 e7ef      	LDI  R30,LOW(127)
000106 bbeb      	OUT  0x1B,R30
                 ; 0000 004C     }
                 ; 0000 004D     if(i == 9){
                 _0xD:
000107 81aa      	LDD  R26,Y+2
000108 81bb      	LDD  R27,Y+2+1
000109 9719      	SBIW R26,9
00010a f431      	BRNE _0xE
                 ; 0000 004E         PORTF = 0x80 + j;
00010b 940e 027e 	CALL SUBOPT_0x0
                 ; 0000 004F         PORTD = 0xF5;
00010d efe5      	LDI  R30,LOW(245)
00010e bbe2      	OUT  0x12,R30
                 ; 0000 0050         PORTA = 0x7F;
00010f e7ef      	LDI  R30,LOW(127)
000110 bbeb      	OUT  0x1B,R30
                 ; 0000 0051     }
                 ; 0000 0052     if(i == 10){
                 _0xE:
000111 81aa      	LDD  R26,Y+2
000112 81bb      	LDD  R27,Y+2+1
000113 971a      	SBIW R26,10
000114 f439      	BRNE _0xF
                 ; 0000 0053         PORTF = 0x26 + j;
000115 81e8      	LD   R30,Y
000116 5dea      	SUBI R30,-LOW(38)
000117 93e0 0062 	STS  98,R30
                 ; 0000 0054         PORTD = 0xFF;
000119 efef      	LDI  R30,LOW(255)
00011a bbe2      	OUT  0x12,R30
                 ; 0000 0055         PORTA = 0xFF;
00011b bbeb      	OUT  0x1B,R30
                 ; 0000 0056     }
                 ; 0000 0057     delay_ms(1);
                 _0xF:
00011c e0a1      	LDI  R26,LOW(1)
00011d e0b0      	LDI  R27,0
00011e 940e 0302 	CALL _delay_ms
                 ; 0000 0058 }
000120 9624      	ADIW R28,4
000121 9508      	RET
                 ; .FEND
                 ;void main(void)
                 ; 0000 005A {
                 _main:
                 ; .FSTART _main
                 ; 0000 005B     DDRF = 0xFF;
000122 efef      	LDI  R30,LOW(255)
000123 93e0 0061 	STS  97,R30
                 ; 0000 005C     DDRD = 0xFF;
000125 bbe1      	OUT  0x11,R30
                 ; 0000 005D     DDRA.7 = 1;
000126 9ad7      	SBI  0x1A,7
                 ; 0000 005E     ASSR = 0<<AS0;
000127 e0e0      	LDI  R30,LOW(0)
000128 bfe0      	OUT  0x30,R30
                 ; 0000 005F     TCCR0=(0<<WGM00) | (0<<COM01)| (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
000129 e0e3      	LDI  R30,LOW(3)
00012a bfe3      	OUT  0x33,R30
                 ; 0000 0060     TCNT0 = 0x06;
00012b e0e6      	LDI  R30,LOW(6)
00012c bfe2      	OUT  0x32,R30
                 ; 0000 0061     OCR0 = 0x00;
00012d e0e0      	LDI  R30,LOW(0)
00012e bfe1      	OUT  0x31,R30
                 ; 0000 0062     TIMSK = (0<<OCIE2) | (0<<TOIE2)| (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
00012f e0e1      	LDI  R30,LOW(1)
000130 bfe7      	OUT  0x37,R30
                 ; 0000 0063     ETIMSK = (0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
000131 e0e0      	LDI  R30,LOW(0)
000132 93e0 007d 	STS  125,R30
                 ; 0000 0064     i2c_init();
000134 940e 02b1 	CALL _i2c_init
                 ; 0000 0065     lcd_init(16);
000136 e1a0      	LDI  R26,LOW(16)
000137 d0a7      	RCALL _lcd_init
                 ; 0000 0066     rtc_init(3,1,0);
000138 e0e3      	LDI  R30,LOW(3)
000139 93ea      	ST   -Y,R30
00013a e0e1      	LDI  R30,LOW(1)
00013b 93ea      	ST   -Y,R30
00013c e0a0      	LDI  R26,LOW(0)
00013d 940e 020f 	CALL _rtc_init
                 ; 0000 0067     rtc_set_time(12,13,10);
00013f e0ec      	LDI  R30,LOW(12)
000140 93ea      	ST   -Y,R30
000141 e0ed      	LDI  R30,LOW(13)
000142 93ea      	ST   -Y,R30
000143 e0aa      	LDI  R26,LOW(10)
000144 940e 024b 	CALL _rtc_set_time
                 ; 0000 0068     #asm("sei")
000146 9478      	sei
                 ; 0000 0069 while (1)
                 _0x12:
                 ; 0000 006A     {
                 ; 0000 006B     // Please write your application code here
                 ; 0000 006C         rtc_get_time(&hour, &minute, &second);
000147 e0e9      	LDI  R30,LOW(9)
000148 e0f0      	LDI  R31,HIGH(9)
000149 93fa      	ST   -Y,R31
00014a 93ea      	ST   -Y,R30
00014b e0e8      	LDI  R30,LOW(8)
00014c e0f0      	LDI  R31,HIGH(8)
00014d 93fa      	ST   -Y,R31
00014e 93ea      	ST   -Y,R30
00014f e0ab      	LDI  R26,LOW(11)
000150 e0b0      	LDI  R27,HIGH(11)
000151 940e 0226 	CALL _rtc_get_time
                 ; 0000 006D         hour_1 = hour / 10;
000153 2da9      	MOV  R26,R9
000154 e0b0      	LDI  R27,0
000155 e0ea      	LDI  R30,LOW(10)
000156 e0f0      	LDI  R31,HIGH(10)
000157 940e 0330 	CALL __DIVW21
000159 016f      	MOVW R12,R30
                 ; 0000 006E         hour_2 = hour - hour_1 * 10;
00015a 2d69      	MOV  R22,R9
00015b 2777      	CLR  R23
00015c 01f6      	MOVW R30,R12
00015d 940e 028a 	CALL SUBOPT_0x2
00015f 93a0 0500 	STS  _hour_2,R26
000161 93b0 0501 	STS  _hour_2+1,R27
                 ; 0000 006F         min_1 = minute / 10;
000163 2da8      	MOV  R26,R8
000164 e0b0      	LDI  R27,0
000165 e0ea      	LDI  R30,LOW(10)
000166 e0f0      	LDI  R31,HIGH(10)
000167 940e 0330 	CALL __DIVW21
000169 93e0 0502 	STS  _min_1,R30
00016b 93f0 0503 	STS  _min_1+1,R31
                 ; 0000 0070         min_2 = minute - min_1 *10;
00016d 2d68      	MOV  R22,R8
00016e 2777      	CLR  R23
00016f 91e0 0502 	LDS  R30,_min_1
000171 91f0 0503 	LDS  R31,_min_1+1
000173 940e 028a 	CALL SUBOPT_0x2
000175 93a0 0504 	STS  _min_2,R26
000177 93b0 0505 	STS  _min_2+1,R27
                 ; 0000 0071         hienThi(hour_1, 0b00000001);
000179 92da      	ST   -Y,R13
00017a 92ca      	ST   -Y,R12
00017b e0a1      	LDI  R26,LOW(1)
00017c e0b0      	LDI  R27,0
00017d df25      	RCALL _hienThi
                 ; 0000 0072         hienThi(hour_2, 0b00001000);
00017e 91e0 0500 	LDS  R30,_hour_2
000180 91f0 0501 	LDS  R31,_hour_2+1
000182 940e 0292 	CALL SUBOPT_0x3
                 ; 0000 0073         if(d == 1){
000184 e0e1      	LDI  R30,LOW(1)
000185 e0f0      	LDI  R31,HIGH(1)
000186 15e4      	CP   R30,R4
000187 05f5      	CPC  R31,R5
000188 f421      	BRNE _0x15
                 ; 0000 0074             hienThi(10, 0b00001000);
000189 e0ea      	LDI  R30,LOW(10)
00018a e0f0      	LDI  R31,HIGH(10)
00018b 940e 0292 	CALL SUBOPT_0x3
                 ; 0000 0075         }
                 ; 0000 0076         hienThi(min_1, 0b00010000);
                 _0x15:
00018d 91e0 0502 	LDS  R30,_min_1
00018f 91f0 0503 	LDS  R31,_min_1+1
000191 93fa      	ST   -Y,R31
000192 93ea      	ST   -Y,R30
000193 e1a0      	LDI  R26,LOW(16)
000194 e0b0      	LDI  R27,0
000195 df0d      	RCALL _hienThi
                 ; 0000 0077         hienThi(min_2, 0b01000000);
000196 91e0 0504 	LDS  R30,_min_2
000198 91f0 0505 	LDS  R31,_min_2+1
00019a 93fa      	ST   -Y,R31
00019b 93ea      	ST   -Y,R30
00019c e4a0      	LDI  R26,LOW(64)
00019d e0b0      	LDI  R27,0
00019e df04      	RCALL _hienThi
                 ; 0000 0078     }
00019f cfa7      	RJMP _0x12
                 ; 0000 0079 }
                 _0x16:
0001a0 cfff      	RJMP _0x16
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001a1 93aa      	ST   -Y,R26
0001a2 81e8      	LD   R30,Y
0001a3 71e0      	ANDI R30,LOW(0x10)
0001a4 f011      	BREQ _0x2000004
0001a5 9adb      	SBI  0x1B,3
0001a6 c001      	RJMP _0x2000005
                 _0x2000004:
0001a7 98db      	CBI  0x1B,3
                 _0x2000005:
0001a8 81e8      	LD   R30,Y
0001a9 72e0      	ANDI R30,LOW(0x20)
0001aa f011      	BREQ _0x2000006
0001ab 9adc      	SBI  0x1B,4
0001ac c001      	RJMP _0x2000007
                 _0x2000006:
0001ad 98dc      	CBI  0x1B,4
                 _0x2000007:
0001ae 81e8      	LD   R30,Y
0001af 74e0      	ANDI R30,LOW(0x40)
0001b0 f011      	BREQ _0x2000008
0001b1 9add      	SBI  0x1B,5
0001b2 c001      	RJMP _0x2000009
                 _0x2000008:
0001b3 98dd      	CBI  0x1B,5
                 _0x2000009:
0001b4 81e8      	LD   R30,Y
0001b5 78e0      	ANDI R30,LOW(0x80)
0001b6 f011      	BREQ _0x200000A
0001b7 9ade      	SBI  0x1B,6
0001b8 c001      	RJMP _0x200000B
                 _0x200000A:
0001b9 98de      	CBI  0x1B,6
                 _0x200000B:
                +
0001ba e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001bb 958a     +DEC R24
0001bc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001bd 9ada      	SBI  0x1B,2
                +
0001be e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001bf 958a     +DEC R24
0001c0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001c1 98da      	CBI  0x1B,2
                +
0001c2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001c3 958a     +DEC R24
0001c4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001c5 c047      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001c6 93aa      	ST   -Y,R26
0001c7 81a8      	LD   R26,Y
0001c8 dfd8      	RCALL __lcd_write_nibble_G100
0001c9 81e8          ld    r30,y
0001ca 95e2          swap  r30
0001cb 83e8          st    y,r30
0001cc 81a8      	LD   R26,Y
0001cd dfd3      	RCALL __lcd_write_nibble_G100
                +
0001ce e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001cf 958a     +DEC R24
0001d0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001d1 c03b      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001d2 e0a2      	LDI  R26,LOW(2)
0001d3 940e 0298 	CALL SUBOPT_0x4
0001d5 e0ac      	LDI  R26,LOW(12)
0001d6 dfef      	RCALL __lcd_write_data
0001d7 e0a1      	LDI  R26,LOW(1)
0001d8 940e 0298 	CALL SUBOPT_0x4
0001da e0e0      	LDI  R30,LOW(0)
0001db 93e0 050a 	STS  __lcd_y,R30
0001dd 2eae      	MOV  R10,R30
0001de 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001df 93aa      	ST   -Y,R26
0001e0 9ad3      	SBI  0x1A,3
0001e1 9ad4      	SBI  0x1A,4
0001e2 9ad5      	SBI  0x1A,5
0001e3 9ad6      	SBI  0x1A,6
0001e4 9ad2      	SBI  0x1A,2
0001e5 9ad0      	SBI  0x1A,0
0001e6 9ad1      	SBI  0x1A,1
0001e7 98da      	CBI  0x1B,2
0001e8 98d8      	CBI  0x1B,0
0001e9 98d9      	CBI  0x1B,1
0001ea 81e8      	LD   R30,Y
0001eb 93e0 050b 	STS  __lcd_maxx,R30
0001ed 58e0      	SUBI R30,-LOW(128)
                +
0001ee 93e0 0508+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001f0 81e8      	LD   R30,Y
0001f1 54e0      	SUBI R30,-LOW(192)
                +
0001f2 93e0 0509+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001f4 e1a4      	LDI  R26,LOW(20)
0001f5 e0b0      	LDI  R27,0
0001f6 940e 0302 	CALL _delay_ms
0001f8 940e 029e 	CALL SUBOPT_0x5
0001fa 940e 029e 	CALL SUBOPT_0x5
0001fc 940e 029e 	CALL SUBOPT_0x5
0001fe e2a0      	LDI  R26,LOW(32)
0001ff dfa1      	RCALL __lcd_write_nibble_G100
                +
000200 ec88     +LDI R24 , LOW ( 200 )
000201 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000202 9701     +SBIW R24 , 1
000203 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000204 e2a8      	LDI  R26,LOW(40)
000205 dfc0      	RCALL __lcd_write_data
000206 e0a4      	LDI  R26,LOW(4)
000207 dfbe      	RCALL __lcd_write_data
000208 e8a5      	LDI  R26,LOW(133)
000209 dfbc      	RCALL __lcd_write_data
00020a e0a6      	LDI  R26,LOW(6)
00020b dfba      	RCALL __lcd_write_data
00020c dfc5      	RCALL _lcd_clear
                 _0x20C0002:
00020d 9621      	ADIW R28,1
00020e 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _rtc_init:
                 ; .FSTART _rtc_init
00020f 93aa      	ST   -Y,R26
000210 81ea      	LDD  R30,Y+2
000211 70e3      	ANDI R30,LOW(0x3)
000212 83ea      	STD  Y+2,R30
000213 81e9      	LDD  R30,Y+1
000214 30e0      	CPI  R30,0
000215 f019      	BREQ _0x2040003
000216 81ea      	LDD  R30,Y+2
000217 61e0      	ORI  R30,0x10
000218 83ea      	STD  Y+2,R30
                 _0x2040003:
000219 81e8      	LD   R30,Y
00021a 30e0      	CPI  R30,0
00021b f019      	BREQ _0x2040004
00021c 81ea      	LDD  R30,Y+2
00021d 68e0      	ORI  R30,0x80
00021e 83ea      	STD  Y+2,R30
                 _0x2040004:
00021f 940e 02a6 	CALL SUBOPT_0x6
000221 e0a7      	LDI  R26,LOW(7)
000222 940e 02ea 	CALL _i2c_write
000224 81aa      	LDD  R26,Y+2
000225 c03b      	RJMP _0x20C0001
                 ; .FEND
                 _rtc_get_time:
                 ; .FSTART _rtc_get_time
000226 93ba      	ST   -Y,R27
000227 93aa      	ST   -Y,R26
000228 940e 02a6 	CALL SUBOPT_0x6
00022a e0a0      	LDI  R26,LOW(0)
00022b 940e 02ea 	CALL _i2c_write
00022d 940e 02c5 	CALL _i2c_stop
00022f 940e 02b6 	CALL _i2c_start
000231 eda1      	LDI  R26,LOW(209)
000232 940e 02ea 	CALL _i2c_write
000234 940e 02ab 	CALL SUBOPT_0x7
000236 81a8      	LD   R26,Y
000237 81b9      	LDD  R27,Y+1
000238 93ec      	ST   X,R30
000239 940e 02ab 	CALL SUBOPT_0x7
00023b 81aa      	LDD  R26,Y+2
00023c 81bb      	LDD  R27,Y+2+1
00023d 93ec      	ST   X,R30
00023e e0a0      	LDI  R26,LOW(0)
00023f 940e 02cf 	CALL _i2c_read
000241 2fae      	MOV  R26,R30
000242 940e 0267 	CALL _bcd2bin
000244 81ac      	LDD  R26,Y+4
000245 81bd      	LDD  R27,Y+4+1
000246 93ec      	ST   X,R30
000247 940e 02c5 	CALL _i2c_stop
000249 9626      	ADIW R28,6
00024a 9508      	RET
                 ; .FEND
                 _rtc_set_time:
                 ; .FSTART _rtc_set_time
00024b 93aa      	ST   -Y,R26
00024c 940e 02a6 	CALL SUBOPT_0x6
00024e e0a0      	LDI  R26,LOW(0)
00024f 940e 02ea 	CALL _i2c_write
000251 81a8      	LD   R26,Y
000252 940e 0274 	CALL _bin2bcd
000254 2fae      	MOV  R26,R30
000255 940e 02ea 	CALL _i2c_write
000257 81a9      	LDD  R26,Y+1
000258 940e 0274 	CALL _bin2bcd
00025a 2fae      	MOV  R26,R30
00025b 940e 02ea 	CALL _i2c_write
00025d 81aa      	LDD  R26,Y+2
00025e 940e 0274 	CALL _bin2bcd
000260 2fae      	MOV  R26,R30
                 _0x20C0001:
000261 940e 02ea 	CALL _i2c_write
000263 940e 02c5 	CALL _i2c_stop
000265 9623      	ADIW R28,3
000266 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _bcd2bin:
                 ; .FSTART _bcd2bin
000267 93aa      	ST   -Y,R26
000268 81e8          ld   r30,y
000269 95e2          swap r30
00026a 70ef          andi r30,0xf
00026b 2fae          mov  r26,r30
00026c 0faa          lsl  r26
00026d 0faa          lsl  r26
00026e 0fea          add  r30,r26
00026f 0fee          lsl  r30
000270 91a9          ld   r26,y+
000271 70af          andi r26,0xf
000272 0fea          add  r30,r26
000273 9508          ret
                 ; .FEND
                 _bin2bcd:
                 ; .FSTART _bin2bcd
000274 93aa      	ST   -Y,R26
000275 91a9          ld   r26,y+
000276 27ee          clr  r30
                 bin2bcd0:
000277 50aa          subi r26,10
000278 f012          brmi bin2bcd1
000279 5fe0          subi r30,-16
00027a cffc          rjmp bin2bcd0
                 bin2bcd1:
00027b 5fa6          subi r26,-10
00027c 0fea          add  r30,r26
00027d 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _hour_2:
000500           	.BYTE 0x2
                 _min_1:
000502           	.BYTE 0x2
                 _min_2:
000504           	.BYTE 0x2
                 __base_y_G100:
000506           	.BYTE 0x4
                 __lcd_y:
00050a           	.BYTE 0x1
                 __lcd_maxx:
00050b           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00027e 81e8      	LD   R30,Y
00027f 58e0      	SUBI R30,-LOW(128)
000280 93e0 0062 	STS  98,R30
000282 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000283 93e0 0062 	STS  98,R30
000285 efef      	LDI  R30,LOW(255)
000286 bbe2      	OUT  0x12,R30
000287 e7ef      	LDI  R30,LOW(127)
000288 bbeb      	OUT  0x1B,R30
000289 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
00028a e0aa      	LDI  R26,LOW(10)
00028b e0b0      	LDI  R27,HIGH(10)
00028c 940e 0318 	CALL __MULW12
00028e 01db      	MOVW R26,R22
00028f 1bae      	SUB  R26,R30
000290 0bbf      	SBC  R27,R31
000291 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000292 93fa      	ST   -Y,R31
000293 93ea      	ST   -Y,R30
000294 e0a8      	LDI  R26,LOW(8)
000295 e0b0      	LDI  R27,0
000296 940c 00a3 	JMP  _hienThi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000298 940e 01c6 	CALL __lcd_write_data
00029a e0a3      	LDI  R26,LOW(3)
00029b e0b0      	LDI  R27,0
00029c 940c 0302 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
00029e e3a0      	LDI  R26,LOW(48)
00029f 940e 01a1 	CALL __lcd_write_nibble_G100
                +
0002a1 ec88     +LDI R24 , LOW ( 200 )
0002a2 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002a3 9701     +SBIW R24 , 1
0002a4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0002a6 940e 02b6 	CALL _i2c_start
0002a8 eda0      	LDI  R26,LOW(208)
0002a9 940c 02ea 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0002ab e0a1      	LDI  R26,LOW(1)
0002ac 940e 02cf 	CALL _i2c_read
0002ae 2fae      	MOV  R26,R30
0002af 940c 0267 	JMP  _bcd2bin
                 
                 
                 	.CSEG
                 	.equ __sda_bit=6
                 	.equ __scl_bit=7
                 	.equ __i2c_port=0x03 ;PORTE
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
0002b1 981f      	cbi  __i2c_port,__scl_bit
0002b2 981e      	cbi  __i2c_port,__sda_bit
0002b3 9a17      	sbi  __i2c_dir,__scl_bit
0002b4 9816      	cbi  __i2c_dir,__sda_bit
0002b5 c015      	rjmp __i2c_delay2
                 _i2c_start:
0002b6 9816      	cbi  __i2c_dir,__sda_bit
0002b7 9817      	cbi  __i2c_dir,__scl_bit
0002b8 27ee      	clr  r30
0002b9 0000      	nop
0002ba 9b0e      	sbis __i2c_pin,__sda_bit
0002bb 9508      	ret
0002bc 9b0f      	sbis __i2c_pin,__scl_bit
0002bd 9508      	ret
0002be d004      	rcall __i2c_delay1
0002bf 9a16      	sbi  __i2c_dir,__sda_bit
0002c0 d002      	rcall __i2c_delay1
0002c1 9a17      	sbi  __i2c_dir,__scl_bit
0002c2 e0e1      	ldi  r30,1
                 __i2c_delay1:
0002c3 e06d      	ldi  r22,13
0002c4 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
0002c5 9a16      	sbi  __i2c_dir,__sda_bit
0002c6 9a17      	sbi  __i2c_dir,__scl_bit
0002c7 d003      	rcall __i2c_delay2
0002c8 9817      	cbi  __i2c_dir,__scl_bit
0002c9 dff9      	rcall __i2c_delay1
0002ca 9816      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
0002cb e16b      	ldi  r22,27
                 __i2c_delay2l:
0002cc 956a      	dec  r22
0002cd f7f1      	brne __i2c_delay2l
0002ce 9508      	ret
                 _i2c_read:
0002cf e078      	ldi  r23,8
                 __i2c_read0:
0002d0 9817      	cbi  __i2c_dir,__scl_bit
0002d1 dff1      	rcall __i2c_delay1
                 __i2c_read3:
0002d2 9b0f      	sbis __i2c_pin,__scl_bit
0002d3 cffe      	rjmp __i2c_read3
0002d4 dfee      	rcall __i2c_delay1
0002d5 9488      	clc
0002d6 990e      	sbic __i2c_pin,__sda_bit
0002d7 9408      	sec
0002d8 9a17      	sbi  __i2c_dir,__scl_bit
0002d9 dff1      	rcall __i2c_delay2
0002da 1fee      	rol  r30
0002db 957a      	dec  r23
0002dc f799      	brne __i2c_read0
0002dd 2f7a      	mov  r23,r26
0002de 2377      	tst  r23
0002df f411      	brne __i2c_read1
0002e0 9816      	cbi  __i2c_dir,__sda_bit
0002e1 c001      	rjmp __i2c_read2
                 __i2c_read1:
0002e2 9a16      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0002e3 dfdf      	rcall __i2c_delay1
0002e4 9817      	cbi  __i2c_dir,__scl_bit
0002e5 dfe5      	rcall __i2c_delay2
0002e6 9a17      	sbi  __i2c_dir,__scl_bit
0002e7 dfdb      	rcall __i2c_delay1
0002e8 9816      	cbi  __i2c_dir,__sda_bit
0002e9 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
0002ea e078      	ldi  r23,8
                 __i2c_write0:
0002eb 0faa      	lsl  r26
0002ec f410      	brcc __i2c_write1
0002ed 9816      	cbi  __i2c_dir,__sda_bit
0002ee c001      	rjmp __i2c_write2
                 __i2c_write1:
0002ef 9a16      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0002f0 dfda      	rcall __i2c_delay2
0002f1 9817      	cbi  __i2c_dir,__scl_bit
0002f2 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
0002f3 9b0f      	sbis __i2c_pin,__scl_bit
0002f4 cffe      	rjmp __i2c_write3
0002f5 dfcd      	rcall __i2c_delay1
0002f6 9a17      	sbi  __i2c_dir,__scl_bit
0002f7 957a      	dec  r23
0002f8 f791      	brne __i2c_write0
0002f9 9816      	cbi  __i2c_dir,__sda_bit
0002fa dfc8      	rcall __i2c_delay1
0002fb 9817      	cbi  __i2c_dir,__scl_bit
0002fc dfce      	rcall __i2c_delay2
0002fd e0e1      	ldi  r30,1
0002fe 990e      	sbic __i2c_pin,__sda_bit
0002ff 27ee      	clr  r30
000300 9a17      	sbi  __i2c_dir,__scl_bit
000301 cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
000302 9610      	adiw r26,0
000303 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000304 ed80     +LDI R24 , LOW ( 0x7D0 )
000305 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000306 9701     +SBIW R24 , 1
000307 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000308 95a8      	wdr
000309 9711      	sbiw r26,1
00030a f7c9      	brne __delay_ms0
                 __delay_ms1:
00030b 9508      	ret
                 
                 __ANEGW1:
00030c 95f1      	NEG  R31
00030d 95e1      	NEG  R30
00030e 40f0      	SBCI R31,0
00030f 9508      	RET
                 
                 __MULW12U:
000310 9ffa      	MUL  R31,R26
000311 2df0      	MOV  R31,R0
000312 9feb      	MUL  R30,R27
000313 0df0      	ADD  R31,R0
000314 9fea      	MUL  R30,R26
000315 2de0      	MOV  R30,R0
000316 0df1      	ADD  R31,R1
000317 9508      	RET
                 
                 __MULW12:
000318 d01c      	RCALL __CHKSIGNW
000319 dff6      	RCALL __MULW12U
00031a f40e      	BRTC __MULW121
00031b dff0      	RCALL __ANEGW1
                 __MULW121:
00031c 9508      	RET
                 
                 __DIVW21U:
00031d 2400      	CLR  R0
00031e 2411      	CLR  R1
00031f e190      	LDI  R25,16
                 __DIVW21U1:
000320 0faa      	LSL  R26
000321 1fbb      	ROL  R27
000322 1c00      	ROL  R0
000323 1c11      	ROL  R1
000324 1a0e      	SUB  R0,R30
000325 0a1f      	SBC  R1,R31
000326 f418      	BRCC __DIVW21U2
000327 0e0e      	ADD  R0,R30
000328 1e1f      	ADC  R1,R31
000329 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00032a 60a1      	SBR  R26,1
                 __DIVW21U3:
00032b 959a      	DEC  R25
00032c f799      	BRNE __DIVW21U1
00032d 01fd      	MOVW R30,R26
00032e 01d0      	MOVW R26,R0
00032f 9508      	RET
                 
                 __DIVW21:
000330 d004      	RCALL __CHKSIGNW
000331 dfeb      	RCALL __DIVW21U
000332 f40e      	BRTC __DIVW211
000333 dfd8      	RCALL __ANEGW1
                 __DIVW211:
000334 9508      	RET
                 
                 __CHKSIGNW:
000335 94e8      	CLT
000336 fff7      	SBRS R31,7
000337 c002      	RJMP __CHKSW1
000338 dfd3      	RCALL __ANEGW1
000339 9468      	SET
                 __CHKSW1:
00033a ffb7      	SBRS R27,7
00033b c006      	RJMP __CHKSW2
00033c 95a0      	COM  R26
00033d 95b0      	COM  R27
00033e 9611      	ADIW R26,1
00033f f800      	BLD  R0,0
000340 9403      	INC  R0
000341 fa00      	BST  R0,0
                 __CHKSW2:
000342 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  15 r1 :   6 r2 :   0 r3 :   0 r4 :   3 r5 :   2 r6 :   5 r7 :   3 
r8 :   2 r9 :   2 r10:   1 r11:   0 r12:   3 r13:   1 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   8 r23:   8 
r24:  22 r25:   7 r26: 103 r27:  36 r28:   5 r29:   1 r30: 207 r31:  38 
x  :   6 y  :  95 z  :   7 
Registers used: 24 out of 35 (68.6%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   6 
adiw  :   7 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   1 brne  :  30 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  48 
cbi   :  23 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   3 cpc   :   3 cpi   :   2 cpse  :   0 dec   :   9 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   1 inc   :   1 jmp   :  40 ld    :  27 ldd   :  34 
ldi   : 120 lds   :   8 lpm   :   7 lsl   :   5 lsr   :   0 mov   :  14 
movw  :  11 mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   1 
or    :   0 ori   :   2 out   :  35 pop   :   0 push  :   0 rcall :  35 
ret   :  21 reti  :   1 rjmp  :  22 rol   :   4 ror   :   0 sbc   :   2 
sbci  :   1 sbi   :  24 sbic  :   2 sbis  :   4 sbiw  :  18 sbr   :   1 
sbrc  :   0 sbrs  :   2 sec   :   1 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  37 std   :   3 sts   :  21 sub   :   2 subi  :  14 
swap  :   2 tst   :   1 wdr   :   1 
Instructions used: 62 out of 117 (53.0%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000686   1642     28   1670  131072   1.3%
[.dseg] 0x000100 0x00050c      0     12     12    4096   0.3%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 10 warnings
