
AVRASM ver. 2.1.30  C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\timercounter\Debug\List\test.asm Thu Nov 28 12:55:38 2024

C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\timercounter\Debug\List\test.asm(1090): warning: Register r4 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\timercounter\Debug\List\test.asm(1091): warning: Register r5 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\timercounter\Debug\List\test.asm(1092): warning: Register r6 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\timercounter\Debug\List\test.asm(1093): warning: Register r7 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\timercounter\Debug\List\test.asm(1094): warning: Register r9 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\timercounter\Debug\List\test.asm(1095): warning: Register r8 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\timercounter\Debug\List\test.asm(1096): warning: Register r11 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\timercounter\Debug\List\test.asm(1097): warning: Register r10 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\timercounter\Debug\List\test.asm(1098): warning: Register r13 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\timercounter\Debug\List\test.asm(1099): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _d=R4
                 	.DEF _d_msb=R5
                 	.DEF _dem=R6
                 	.DEF _dem_msb=R7
                 	.DEF _hour=R9
                 	.DEF _minute=R8
                 	.DEF _second=R11
                 	.DEF _day=R10
                 	.DEF _month=R13
                 	.DEF _year=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 009f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 00cf 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x6:
00004f 0500
000050 0504
000051 0508
000052 050c      	.DB  LOW(_0x5),HIGH(_0x5),LOW(_0x5+4),HIGH(_0x5+4),LOW(_0x5+8),HIGH(_0x5+8),LOW(_0x5+12),HIGH(_0x5+12)
000053 0510
000054 0514
000055 0518
000056 051c      	.DB  LOW(_0x5+16),HIGH(_0x5+16),LOW(_0x5+20),HIGH(_0x5+20),LOW(_0x5+24),HIGH(_0x5+24),LOW(_0x5+28),HIGH(_0x5+28)
                 _0x0:
000057 7245
000058 0072
000059 7553
00005a 006e      	.DB  0x45,0x72,0x72,0x0,0x53,0x75,0x6E,0x0
00005b 6f4d
00005c 006e
00005d 7554
00005e 0065      	.DB  0x4D,0x6F,0x6E,0x0,0x54,0x75,0x65,0x0
00005f 6557
000060 0064
000061 6854
000062 0075      	.DB  0x57,0x65,0x64,0x0,0x54,0x68,0x75,0x0
000063 7246
000064 0069
000065 6153
000066 0074      	.DB  0x46,0x72,0x69,0x0,0x53,0x61,0x74,0x0
000067 3025
000068 7532
000069 253a
00006a 3230      	.DB  0x25,0x30,0x32,0x75,0x3A,0x25,0x30,0x32
00006b 3a75
00006c 3025
00006d 7532
00006e 5400      	.DB  0x75,0x3A,0x25,0x30,0x32,0x75,0x0,0x54
00006f 6d69
000070 3a65
000071 2500
000072 3230      	.DB  0x69,0x6D,0x65,0x3A,0x0,0x25,0x30,0x32
000073 2f75
000074 3025
000075 7532
000076 322f      	.DB  0x75,0x2F,0x25,0x30,0x32,0x75,0x2F,0x32
000077 2530
000078 3230
000079 2075
00007a 7325      	.DB  0x30,0x25,0x30,0x32,0x75,0x20,0x25,0x73
C:\Users\ADMIN\OneDrive\Desktop\Embedded Code\timercounter\Debug\List\test.asm(1163): warning: .cseg .db misalignment - padding zero byte
00007b 0000      	.DB  0x0
                 _0x2000003:
00007c c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00007d 0004      	.DW  0x04
00007e 0500      	.DW  _0x5
00007f 00ae      	.DW  _0x0*2
                 
000080 0004      	.DW  0x04
000081 0504      	.DW  _0x5+4
000082 00b2      	.DW  _0x0*2+4
                 
000083 0004      	.DW  0x04
000084 0508      	.DW  _0x5+8
000085 00b6      	.DW  _0x0*2+8
                 
000086 0004      	.DW  0x04
000087 050c      	.DW  _0x5+12
000088 00ba      	.DW  _0x0*2+12
                 
000089 0004      	.DW  0x04
00008a 0510      	.DW  _0x5+16
00008b 00be      	.DW  _0x0*2+16
                 
00008c 0004      	.DW  0x04
00008d 0514      	.DW  _0x5+20
00008e 00c2      	.DW  _0x0*2+20
                 
00008f 0004      	.DW  0x04
000090 0518      	.DW  _0x5+24
000091 00c6      	.DW  _0x0*2+24
                 
000092 0004      	.DW  0x04
000093 051c      	.DW  _0x5+28
000094 00ca      	.DW  _0x0*2+28
                 
000095 0010      	.DW  0x10
000096 0527      	.DW  _weekdays
000097 009e      	.DW  _0x6*2
                 
000098 0006      	.DW  0x06
000099 0520      	.DW  _0xD
00009a 00dd      	.DW  _0x0*2+47
                 
00009b 0002      	.DW  0x02
00009c 0537      	.DW  __base_y_G100
00009d 00f8      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00009e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00009f 94f8      	CLI
0000a0 27ee      	CLR  R30
0000a1 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000a2 e0f1      	LDI  R31,1
0000a3 bff5      	OUT  MCUCR,R31
0000a4 bfe5      	OUT  MCUCR,R30
0000a5 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
0000a7 e08d      	LDI  R24,(14-2)+1
0000a8 e0a2      	LDI  R26,2
0000a9 27bb      	CLR  R27
                 __CLEAR_REG:
0000aa 93ed      	ST   X+,R30
0000ab 958a      	DEC  R24
0000ac f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000ad e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000ae e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000af e0a0      	LDI  R26,LOW(__SRAM_START)
0000b0 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000b1 93ed      	ST   X+,R30
0000b2 9701      	SBIW R24,1
0000b3 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000b4 efea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000b5 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000b6 9185      	LPM  R24,Z+
0000b7 9195      	LPM  R25,Z+
0000b8 9700      	SBIW R24,0
0000b9 f061      	BREQ __GLOBAL_INI_END
0000ba 91a5      	LPM  R26,Z+
0000bb 91b5      	LPM  R27,Z+
0000bc 9005      	LPM  R0,Z+
0000bd 9015      	LPM  R1,Z+
0000be 01bf      	MOVW R22,R30
0000bf 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000c0 9005      	LPM  R0,Z+
0000c1 920d      	ST   X+,R0
0000c2 9701      	SBIW R24,1
0000c3 f7e1      	BRNE __GLOBAL_INI_LOOP
0000c4 01fb      	MOVW R30,R22
0000c5 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000c6 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000c7 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000c8 bfed      	OUT  SPL,R30
0000c9 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ca bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000cb e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000cc e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000cd 940c 0105 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <i2c.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <ds1307.h>
                 ;
                 ;int d; // Blink flag
                 ;unsigned int dem; // Timer counter
                 ;unsigned char hour, minute, second; // Time variables
                 ;unsigned char day, month, year, weekday; // Date variables
                 ;
                 ;// Timer0 interrupt for blinking colon
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0000 000E interrupt[17] void timer0_ovf_isr(void) {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000cf 93ea      	ST   -Y,R30
0000d0 93fa      	ST   -Y,R31
0000d1 b7ef      	IN   R30,SREG
0000d2 93ea      	ST   -Y,R30
                 ; 0000 000F     TCNT0 = 0x66; // Reload timer
0000d3 e6e6      	LDI  R30,LOW(102)
0000d4 bfe2      	OUT  0x32,R30
                 ; 0000 0010     dem++;
0000d5 01f3      	MOVW R30,R6
0000d6 9631      	ADIW R30,1
0000d7 013f      	MOVW R6,R30
                 ; 0000 0011     if (dem == 1000) d = 1; // Blink colon
0000d8 eee8      	LDI  R30,LOW(1000)
0000d9 e0f3      	LDI  R31,HIGH(1000)
0000da 15e6      	CP   R30,R6
0000db 05f7      	CPC  R31,R7
0000dc f419      	BRNE _0x3
0000dd e0e1      	LDI  R30,LOW(1)
0000de e0f0      	LDI  R31,HIGH(1)
0000df 012f      	MOVW R4,R30
                 ; 0000 0012     if (dem == 2000) {
                 _0x3:
0000e0 ede0      	LDI  R30,LOW(2000)
0000e1 e0f7      	LDI  R31,HIGH(2000)
0000e2 15e6      	CP   R30,R6
0000e3 05f7      	CPC  R31,R7
0000e4 f421      	BRNE _0x4
                 ; 0000 0013         dem = 0;
0000e5 2466      	CLR  R6
0000e6 2477      	CLR  R7
                 ; 0000 0014         d = 0;
0000e7 2444      	CLR  R4
0000e8 2455      	CLR  R5
                 ; 0000 0015     }
                 ; 0000 0016 }
                 _0x4:
0000e9 91e9      	LD   R30,Y+
0000ea bfef      	OUT  SREG,R30
0000eb 91f9      	LD   R31,Y+
0000ec 91e9      	LD   R30,Y+
0000ed 9518      	RETI
                 ; .FEND
                 ;
                 ;const char *weekdays[] = {
                 ;    "Err", // Default for invalid day
                 ;    "Sun",
                 ;    "Mon",
                 ;    "Tue",
                 ;    "Wed",
                 ;    "Thu",
                 ;    "Fri",
                 ;    "Sat"
                 ;};
                 
                 	.DSEG
                 _0x5:
000500           	.BYTE 0x20
                 ;
                 ;const char *get_weekday_name(unsigned char weekday) {
                 ; 0000 0023 const char *get_weekday_name(unsigned char weekday) {
                 
                 	.CSEG
                 _get_weekday_name:
                 ; .FSTART _get_weekday_name
                 ; 0000 0024     if (weekday >= 1 && weekday <= 7) {
0000ee 93aa      	ST   -Y,R26
                 ;	weekday -> Y+0
0000ef 81a8      	LD   R26,Y
0000f0 30a1      	CPI  R26,LOW(0x1)
0000f1 f010      	BRLO _0x8
0000f2 30a8      	CPI  R26,LOW(0x8)
0000f3 f008      	BRLO _0x9
                 _0x8:
0000f4 c00b      	RJMP _0x7
                 _0x9:
                 ; 0000 0025         return weekdays[weekday]; // Return valid day
0000f5 81e8      	LD   R30,Y
0000f6 e2a7      	LDI  R26,LOW(_weekdays)
0000f7 e0b5      	LDI  R27,HIGH(_weekdays)
0000f8 e0f0      	LDI  R31,0
0000f9 0fee      	LSL  R30
0000fa 1fff      	ROL  R31
0000fb 0fae      	ADD  R26,R30
0000fc 1fbf      	ADC  R27,R31
0000fd 940e 0553 	CALL __GETW1P
0000ff c137      	RJMP _0x20C0004
                 ; 0000 0026     }
                 ; 0000 0027     return weekdays[0]; // Return "Err" for invalid
                 _0x7:
000100 91e0 0527 	LDS  R30,_weekdays
000102 91f0 0528 	LDS  R31,_weekdays+1
000104 c132      	RJMP _0x20C0004
                 ; 0000 0028 }
                 ; .FEND
                 ;
                 ;// Main function
                 ;void main(void) {
                 ; 0000 002B void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 002C     char time_str[16]; // Buffer for time
                 ; 0000 002D     char date_str[16]; // Buffer for date
                 ; 0000 002E 
                 ; 0000 002F     // Initialize peripherals
                 ; 0000 0030     i2c_init();
000105 97a0      	SBIW R28,32
                 ;	time_str -> Y+16
                 ;	date_str -> Y+0
000106 940e 04f0 	CALL _i2c_init
                 ; 0000 0031     lcd_init(16);
000108 e1a0      	LDI  R26,LOW(16)
000109 d0ff      	RCALL _lcd_init
                 ; 0000 0032     rtc_init(3, 1, 0);
00010a e0e3      	LDI  R30,LOW(3)
00010b 93ea      	ST   -Y,R30
00010c e0e1      	LDI  R30,LOW(1)
00010d 93ea      	ST   -Y,R30
00010e e0a0      	LDI  R26,LOW(0)
00010f 940e 03e1 	CALL _rtc_init
                 ; 0000 0033     rtc_set_time(12, 13, 10); // Set time
000111 e0ec      	LDI  R30,LOW(12)
000112 93ea      	ST   -Y,R30
000113 e0ed      	LDI  R30,LOW(13)
000114 93ea      	ST   -Y,R30
000115 e0aa      	LDI  R26,LOW(10)
000116 940e 040f 	CALL _rtc_set_time
                 ; 0000 0034     rtc_set_date(27, 11, 24, 4); // Set date
000118 e1eb      	LDI  R30,LOW(27)
000119 93ea      	ST   -Y,R30
00011a e0eb      	LDI  R30,LOW(11)
00011b 93ea      	ST   -Y,R30
00011c e1e8      	LDI  R30,LOW(24)
00011d 93ea      	ST   -Y,R30
00011e e0a4      	LDI  R26,LOW(4)
00011f 940e 043a 	CALL _rtc_set_date
                 ; 0000 0035 
                 ; 0000 0036     #asm("sei") // Enable global interrupts
000121 9478      	sei
                 ; 0000 0037 
                 ; 0000 0038     while (1) {
                 _0xA:
                 ; 0000 0039         // Fetch time and date
                 ; 0000 003A         rtc_get_time(&hour, &minute, &second);
000122 e0e9      	LDI  R30,LOW(9)
000123 e0f0      	LDI  R31,HIGH(9)
000124 93fa      	ST   -Y,R31
000125 93ea      	ST   -Y,R30
000126 e0e8      	LDI  R30,LOW(8)
000127 e0f0      	LDI  R31,HIGH(8)
000128 93fa      	ST   -Y,R31
000129 93ea      	ST   -Y,R30
00012a e0ab      	LDI  R26,LOW(11)
00012b e0b0      	LDI  R27,HIGH(11)
00012c 940e 03f8 	CALL _rtc_get_time
                 ; 0000 003B         rtc_get_date(&day, &month, &year, &weekday);
00012e e0ea      	LDI  R30,LOW(10)
00012f e0f0      	LDI  R31,HIGH(10)
000130 93fa      	ST   -Y,R31
000131 93ea      	ST   -Y,R30
000132 e0ed      	LDI  R30,LOW(13)
000133 e0f0      	LDI  R31,HIGH(13)
000134 93fa      	ST   -Y,R31
000135 93ea      	ST   -Y,R30
000136 e0ec      	LDI  R30,LOW(12)
000137 e0f0      	LDI  R31,HIGH(12)
000138 93fa      	ST   -Y,R31
000139 93ea      	ST   -Y,R30
00013a e2a6      	LDI  R26,LOW(_weekday)
00013b e0b5      	LDI  R27,HIGH(_weekday)
00013c 940e 0421 	CALL _rtc_get_date
                 ; 0000 003C 
                 ; 0000 003D         // Format and display time
                 ; 0000 003E         sprintf(time_str, "%02u:%02u:%02u", hour, minute, second);
00013e 01fe      	MOVW R30,R28
00013f 9670      	ADIW R30,16
000140 93fa      	ST   -Y,R31
000141 93ea      	ST   -Y,R30
                +
000142 ecee     +LDI R30 , LOW ( 2 * _0x0 + ( 32 ) )
000143 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 32 ) )
                 	__POINTW1FN _0x0,32
000144 93fa      	ST   -Y,R31
000145 93ea      	ST   -Y,R30
000146 2de9      	MOV  R30,R9
000147 940e 047f 	CALL SUBOPT_0x0
000149 2de8      	MOV  R30,R8
00014a 940e 047f 	CALL SUBOPT_0x0
00014c 2deb      	MOV  R30,R11
00014d 940e 047f 	CALL SUBOPT_0x0
00014f e08c      	LDI  R24,12
000150 940e 03ad 	CALL _sprintf
000152 9660      	ADIW R28,16
                 ; 0000 003F         lcd_clear();
000153 d077      	RCALL _lcd_clear
                 ; 0000 0040         lcd_gotoxy(0, 0);
000154 e0e0      	LDI  R30,LOW(0)
000155 93ea      	ST   -Y,R30
000156 e0a0      	LDI  R26,LOW(0)
000157 d062      	RCALL _lcd_gotoxy
                 ; 0000 0041         lcd_puts("Time:");
                +
000158 e2a0     +LDI R26 , LOW ( _0xD + ( 0 ) )
000159 e0b5     +LDI R27 , HIGH ( _0xD + ( 0 ) )
                 	__POINTW2MN _0xD,0
00015a d09e      	RCALL _lcd_puts
                 ; 0000 0042         lcd_gotoxy(6, 0);
00015b e0e6      	LDI  R30,LOW(6)
00015c 93ea      	ST   -Y,R30
00015d e0a0      	LDI  R26,LOW(0)
00015e d05b      	RCALL _lcd_gotoxy
                 ; 0000 0043         lcd_puts(time_str);
00015f 01de      	MOVW R26,R28
000160 9650      	ADIW R26,16
000161 d097      	RCALL _lcd_puts
                 ; 0000 0044 
                 ; 0000 0045         // Format and display date
                 ; 0000 0046         sprintf(date_str, "%02u/%02u/20%02u %s", day, month, year, get_weekday_name(weekday));
000162 01fe      	MOVW R30,R28
000163 93fa      	ST   -Y,R31
000164 93ea      	ST   -Y,R30
                +
000165 eee3     +LDI R30 , LOW ( 2 * _0x0 + ( 53 ) )
000166 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 53 ) )
                 	__POINTW1FN _0x0,53
000167 93fa      	ST   -Y,R31
000168 93ea      	ST   -Y,R30
000169 2dea      	MOV  R30,R10
00016a 940e 047f 	CALL SUBOPT_0x0
00016c 2ded      	MOV  R30,R13
00016d 940e 047f 	CALL SUBOPT_0x0
00016f 2dec      	MOV  R30,R12
000170 940e 047f 	CALL SUBOPT_0x0
000172 91a0 0526 	LDS  R26,_weekday
000174 df79      	RCALL _get_weekday_name
000175 2766      	CLR  R22
000176 2777      	CLR  R23
000177 940e 055b 	CALL __PUTPARD1
000179 e180      	LDI  R24,16
00017a 940e 03ad 	CALL _sprintf
00017c 9664      	ADIW R28,20
                 ; 0000 0047         lcd_gotoxy(0, 1);
00017d e0e0      	LDI  R30,LOW(0)
00017e 93ea      	ST   -Y,R30
00017f e0a1      	LDI  R26,LOW(1)
000180 d039      	RCALL _lcd_gotoxy
                 ; 0000 0048         lcd_puts(date_str);
000181 01de      	MOVW R26,R28
000182 d076      	RCALL _lcd_puts
                 ; 0000 0049 
                 ; 0000 004A         delay_ms(500); // Avoid flicker
000183 efa4      	LDI  R26,LOW(500)
000184 e0b1      	LDI  R27,HIGH(500)
000185 940e 0541 	CALL _delay_ms
                 ; 0000 004B     }
000187 cf9a      	RJMP _0xA
                 ; 0000 004C }
                 _0xE:
000188 cfff      	RJMP _0xE
                 ; .FEND
                 
                 	.DSEG
                 _0xD:
000520           	.BYTE 0x6
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000189 93aa      	ST   -Y,R26
00018a 81e8      	LD   R30,Y
00018b 71e0      	ANDI R30,LOW(0x10)
00018c f011      	BREQ _0x2000004
00018d 9ac3      	SBI  0x18,3
00018e c001      	RJMP _0x2000005
                 _0x2000004:
00018f 98c3      	CBI  0x18,3
                 _0x2000005:
000190 81e8      	LD   R30,Y
000191 72e0      	ANDI R30,LOW(0x20)
000192 f011      	BREQ _0x2000006
000193 9ac4      	SBI  0x18,4
000194 c001      	RJMP _0x2000007
                 _0x2000006:
000195 98c4      	CBI  0x18,4
                 _0x2000007:
000196 81e8      	LD   R30,Y
000197 74e0      	ANDI R30,LOW(0x40)
000198 f011      	BREQ _0x2000008
000199 9ac5      	SBI  0x18,5
00019a c001      	RJMP _0x2000009
                 _0x2000008:
00019b 98c5      	CBI  0x18,5
                 _0x2000009:
00019c 81e8      	LD   R30,Y
00019d 78e0      	ANDI R30,LOW(0x80)
00019e f011      	BREQ _0x200000A
00019f 9ac6      	SBI  0x18,6
0001a0 c001      	RJMP _0x200000B
                 _0x200000A:
0001a1 98c6      	CBI  0x18,6
                 _0x200000B:
                +
0001a2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001a3 958a     +DEC R24
0001a4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001a5 9ac2      	SBI  0x18,2
                +
0001a6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001a7 958a     +DEC R24
0001a8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001a9 98c2      	CBI  0x18,2
                +
0001aa e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001ab 958a     +DEC R24
0001ac f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001ad c089      	RJMP _0x20C0004
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001ae 93aa      	ST   -Y,R26
0001af 81a8      	LD   R26,Y
0001b0 dfd8      	RCALL __lcd_write_nibble_G100
0001b1 81e8          ld    r30,y
0001b2 95e2          swap  r30
0001b3 83e8          st    y,r30
0001b4 81a8      	LD   R26,Y
0001b5 dfd3      	RCALL __lcd_write_nibble_G100
                +
0001b6 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001b7 958a     +DEC R24
0001b8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001b9 c07d      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001ba 93aa      	ST   -Y,R26
0001bb 81e8      	LD   R30,Y
0001bc e0f0      	LDI  R31,0
0001bd 5ce9      	SUBI R30,LOW(-__base_y_G100)
0001be 4ffa      	SBCI R31,HIGH(-__base_y_G100)
0001bf 81e0      	LD   R30,Z
0001c0 81a9      	LDD  R26,Y+1
0001c1 0fae      	ADD  R26,R30
0001c2 dfeb      	RCALL __lcd_write_data
0001c3 81e9      	LDD  R30,Y+1
0001c4 93e0 053b 	STS  __lcd_x,R30
0001c6 81e8      	LD   R30,Y
0001c7 93e0 053c 	STS  __lcd_y,R30
0001c9 9622      	ADIW R28,2
0001ca 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001cb e0a2      	LDI  R26,LOW(2)
0001cc 940e 0485 	CALL SUBOPT_0x1
0001ce e0ac      	LDI  R26,LOW(12)
0001cf dfde      	RCALL __lcd_write_data
0001d0 e0a1      	LDI  R26,LOW(1)
0001d1 940e 0485 	CALL SUBOPT_0x1
0001d3 e0e0      	LDI  R30,LOW(0)
0001d4 93e0 053c 	STS  __lcd_y,R30
0001d6 93e0 053b 	STS  __lcd_x,R30
0001d8 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001d9 93aa      	ST   -Y,R26
0001da 81a8      	LD   R26,Y
0001db 30aa      	CPI  R26,LOW(0xA)
0001dc f031      	BREQ _0x2000011
0001dd 91e0 053d 	LDS  R30,__lcd_maxx
0001df 91a0 053b 	LDS  R26,__lcd_x
0001e1 17ae      	CP   R26,R30
0001e2 f060      	BRLO _0x2000010
                 _0x2000011:
0001e3 e0e0      	LDI  R30,LOW(0)
0001e4 93ea      	ST   -Y,R30
0001e5 91a0 053c 	LDS  R26,__lcd_y
0001e7 5faf      	SUBI R26,-LOW(1)
0001e8 93a0 053c 	STS  __lcd_y,R26
0001ea dfcf      	RCALL _lcd_gotoxy
0001eb 81a8      	LD   R26,Y
0001ec 30aa      	CPI  R26,LOW(0xA)
0001ed f409      	BRNE _0x2000013
0001ee c048      	RJMP _0x20C0004
                 _0x2000013:
                 _0x2000010:
0001ef 91e0 053b 	LDS  R30,__lcd_x
0001f1 5fef      	SUBI R30,-LOW(1)
0001f2 93e0 053b 	STS  __lcd_x,R30
0001f4 9ac0      	SBI  0x18,0
0001f5 81a8      	LD   R26,Y
0001f6 dfb7      	RCALL __lcd_write_data
0001f7 98c0      	CBI  0x18,0
0001f8 c03e      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001f9 93ba      	ST   -Y,R27
0001fa 93aa      	ST   -Y,R26
0001fb 931a      	ST   -Y,R17
                 _0x2000014:
0001fc 81a9      	LDD  R26,Y+1
0001fd 81ba      	LDD  R27,Y+1+1
0001fe 91ed      	LD   R30,X+
0001ff 83a9      	STD  Y+1,R26
000200 83ba      	STD  Y+1+1,R27
000201 2f1e      	MOV  R17,R30
000202 30e0      	CPI  R30,0
000203 f019      	BREQ _0x2000016
000204 2fa1      	MOV  R26,R17
000205 dfd3      	RCALL _lcd_putchar
000206 cff5      	RJMP _0x2000014
                 _0x2000016:
000207 8118      	LDD  R17,Y+0
000208 c216      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000209 93aa      	ST   -Y,R26
00020a 9abb      	SBI  0x17,3
00020b 9abc      	SBI  0x17,4
00020c 9abd      	SBI  0x17,5
00020d 9abe      	SBI  0x17,6
00020e 9aba      	SBI  0x17,2
00020f 9ab8      	SBI  0x17,0
000210 9ab9      	SBI  0x17,1
000211 98c2      	CBI  0x18,2
000212 98c0      	CBI  0x18,0
000213 98c1      	CBI  0x18,1
000214 81e8      	LD   R30,Y
000215 93e0 053d 	STS  __lcd_maxx,R30
000217 58e0      	SUBI R30,-LOW(128)
                +
000218 93e0 0539+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00021a 81e8      	LD   R30,Y
00021b 54e0      	SUBI R30,-LOW(192)
                +
00021c 93e0 053a+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00021e e1a4      	LDI  R26,LOW(20)
00021f e0b0      	LDI  R27,0
000220 940e 0541 	CALL _delay_ms
000222 940e 048b 	CALL SUBOPT_0x2
000224 940e 048b 	CALL SUBOPT_0x2
000226 940e 048b 	CALL SUBOPT_0x2
000228 e2a0      	LDI  R26,LOW(32)
000229 df5f      	RCALL __lcd_write_nibble_G100
                +
00022a ec88     +LDI R24 , LOW ( 200 )
00022b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00022c 9701     +SBIW R24 , 1
00022d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00022e e2a8      	LDI  R26,LOW(40)
00022f df7e      	RCALL __lcd_write_data
000230 e0a4      	LDI  R26,LOW(4)
000231 df7c      	RCALL __lcd_write_data
000232 e8a5      	LDI  R26,LOW(133)
000233 df7a      	RCALL __lcd_write_data
000234 e0a6      	LDI  R26,LOW(6)
000235 df78      	RCALL __lcd_write_data
000236 df94      	RCALL _lcd_clear
                 _0x20C0004:
000237 9621      	ADIW R28,1
000238 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000239 93ba      	ST   -Y,R27
00023a 93aa      	ST   -Y,R26
00023b 931a      	ST   -Y,R17
00023c 930a      	ST   -Y,R16
00023d 81aa      	LDD  R26,Y+2
00023e 81bb      	LDD  R27,Y+2+1
00023f 9612      	ADIW R26,2
000240 940e 0553 	CALL __GETW1P
000242 9730      	SBIW R30,0
000243 f159      	BREQ _0x2020010
000244 81aa      	LDD  R26,Y+2
000245 81bb      	LDD  R27,Y+2+1
000246 9614      	ADIW R26,4
000247 940e 0553 	CALL __GETW1P
000249 018f      	MOVW R16,R30
00024a 9730      	SBIW R30,0
00024b f061      	BREQ _0x2020012
                +
00024c 3002     +CPI R16 , LOW ( 2 )
00024d e0e0     +LDI R30 , HIGH ( 2 )
00024e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00024f f098      	BRLO _0x2020013
000250 01f8      	MOVW R30,R16
000251 9731      	SBIW R30,1
000252 018f      	MOVW R16,R30
                +
000253 81aa     +LDD R26 , Y + 2
000254 81bb     +LDD R27 , Y + 2 + 1
000255 9614     +ADIW R26 , 4
000256 93ed     +ST X + , R30
000257 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000258 81aa      	LDD  R26,Y+2
000259 81bb      	LDD  R27,Y+2+1
00025a 9612      	ADIW R26,2
00025b 91ed      	LD   R30,X+
00025c 91fd      	LD   R31,X+
00025d 9631      	ADIW R30,1
00025e 93fe      	ST   -X,R31
00025f 93ee      	ST   -X,R30
000260 9731      	SBIW R30,1
000261 81ac      	LDD  R26,Y+4
000262 83a0      	STD  Z+0,R26
                 _0x2020013:
000263 81aa      	LDD  R26,Y+2
000264 81bb      	LDD  R27,Y+2+1
000265 940e 0553 	CALL __GETW1P
000267 23ff      	TST  R31
000268 f02a      	BRMI _0x2020014
000269 91ed      	LD   R30,X+
00026a 91fd      	LD   R31,X+
00026b 9631      	ADIW R30,1
00026c 93fe      	ST   -X,R31
00026d 93ee      	ST   -X,R30
                 _0x2020014:
00026e c006      	RJMP _0x2020015
                 _0x2020010:
00026f 81aa      	LDD  R26,Y+2
000270 81bb      	LDD  R27,Y+2+1
000271 efef      	LDI  R30,LOW(65535)
000272 efff      	LDI  R31,HIGH(65535)
000273 93ed      	ST   X+,R30
000274 93fc      	ST   X,R31
                 _0x2020015:
000275 8119      	LDD  R17,Y+1
000276 8108      	LDD  R16,Y+0
000277 9625      	ADIW R28,5
000278 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000279 93ba      	ST   -Y,R27
00027a 93aa      	ST   -Y,R26
00027b 9726      	SBIW R28,6
00027c 940e 0560 	CALL __SAVELOCR6
00027e e010      	LDI  R17,0
00027f 85ac      	LDD  R26,Y+12
000280 85bd      	LDD  R27,Y+12+1
000281 e0e0      	LDI  R30,LOW(0)
000282 e0f0      	LDI  R31,HIGH(0)
000283 93ed      	ST   X+,R30
000284 93fc      	ST   X,R31
                 _0x2020016:
000285 89ea      	LDD  R30,Y+18
000286 89fb      	LDD  R31,Y+18+1
000287 9631      	ADIW R30,1
000288 8bea      	STD  Y+18,R30
000289 8bfb      	STD  Y+18+1,R31
00028a 9731      	SBIW R30,1
00028b 91e4      	LPM  R30,Z
00028c 2f2e      	MOV  R18,R30
00028d 30e0      	CPI  R30,0
00028e f409      	BRNE PC+2
00028f c115      	RJMP _0x2020018
000290 2fe1      	MOV  R30,R17
000291 30e0      	CPI  R30,0
000292 f439      	BRNE _0x202001C
000293 3225      	CPI  R18,37
000294 f411      	BRNE _0x202001D
000295 e011      	LDI  R17,LOW(1)
000296 c002      	RJMP _0x202001E
                 _0x202001D:
000297 940e 0493 	CALL SUBOPT_0x3
                 _0x202001E:
000299 c10a      	RJMP _0x202001B
                 _0x202001C:
00029a 30e1      	CPI  R30,LOW(0x1)
00029b f4a9      	BRNE _0x202001F
00029c 3225      	CPI  R18,37
00029d f419      	BRNE _0x2020020
00029e 940e 0493 	CALL SUBOPT_0x3
0002a0 c102      	RJMP _0x20200CC
                 _0x2020020:
0002a1 e012      	LDI  R17,LOW(2)
0002a2 e040      	LDI  R20,LOW(0)
0002a3 e000      	LDI  R16,LOW(0)
0002a4 322d      	CPI  R18,45
0002a5 f411      	BRNE _0x2020021
0002a6 e001      	LDI  R16,LOW(1)
0002a7 c0fc      	RJMP _0x202001B
                 _0x2020021:
0002a8 322b      	CPI  R18,43
0002a9 f411      	BRNE _0x2020022
0002aa e24b      	LDI  R20,LOW(43)
0002ab c0f8      	RJMP _0x202001B
                 _0x2020022:
0002ac 3220      	CPI  R18,32
0002ad f411      	BRNE _0x2020023
0002ae e240      	LDI  R20,LOW(32)
0002af c0f4      	RJMP _0x202001B
                 _0x2020023:
0002b0 c002      	RJMP _0x2020024
                 _0x202001F:
0002b1 30e2      	CPI  R30,LOW(0x2)
0002b2 f439      	BRNE _0x2020025
                 _0x2020024:
0002b3 e050      	LDI  R21,LOW(0)
0002b4 e013      	LDI  R17,LOW(3)
0002b5 3320      	CPI  R18,48
0002b6 f411      	BRNE _0x2020026
0002b7 6800      	ORI  R16,LOW(128)
0002b8 c0eb      	RJMP _0x202001B
                 _0x2020026:
0002b9 c003      	RJMP _0x2020027
                 _0x2020025:
0002ba 30e3      	CPI  R30,LOW(0x3)
0002bb f009      	BREQ PC+2
0002bc c0e7      	RJMP _0x202001B
                 _0x2020027:
0002bd 3320      	CPI  R18,48
0002be f010      	BRLO _0x202002A
0002bf 332a      	CPI  R18,58
0002c0 f008      	BRLO _0x202002B
                 _0x202002A:
0002c1 c007      	RJMP _0x2020029
                 _0x202002B:
0002c2 e0aa      	LDI  R26,LOW(10)
0002c3 9f5a      	MUL  R21,R26
0002c4 2d50      	MOV  R21,R0
0002c5 2fe2      	MOV  R30,R18
0002c6 53e0      	SUBI R30,LOW(48)
0002c7 0f5e      	ADD  R21,R30
0002c8 c0db      	RJMP _0x202001B
                 _0x2020029:
0002c9 2fe2      	MOV  R30,R18
0002ca 36e3      	CPI  R30,LOW(0x63)
0002cb f449      	BRNE _0x202002F
0002cc 940e 049a 	CALL SUBOPT_0x4
0002ce 89e8      	LDD  R30,Y+16
0002cf 89f9      	LDD  R31,Y+16+1
0002d0 81a4      	LDD  R26,Z+4
0002d1 93aa      	ST   -Y,R26
0002d2 940e 04a0 	CALL SUBOPT_0x5
0002d4 c0ce      	RJMP _0x2020030
                 _0x202002F:
0002d5 37e3      	CPI  R30,LOW(0x73)
0002d6 f441      	BRNE _0x2020032
0002d7 940e 049a 	CALL SUBOPT_0x4
0002d9 940e 04a6 	CALL SUBOPT_0x6
0002db 940e 044f 	CALL _strlen
0002dd 2f1e      	MOV  R17,R30
0002de c00a      	RJMP _0x2020033
                 _0x2020032:
0002df 37e0      	CPI  R30,LOW(0x70)
0002e0 f461      	BRNE _0x2020035
0002e1 940e 049a 	CALL SUBOPT_0x4
0002e3 940e 04a6 	CALL SUBOPT_0x6
0002e5 940e 045b 	CALL _strlenf
0002e7 2f1e      	MOV  R17,R30
0002e8 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0002e9 6002      	ORI  R16,LOW(2)
0002ea 770f      	ANDI R16,LOW(127)
0002eb e030      	LDI  R19,LOW(0)
0002ec c034      	RJMP _0x2020036
                 _0x2020035:
0002ed 36e4      	CPI  R30,LOW(0x64)
0002ee f011      	BREQ _0x2020039
0002ef 36e9      	CPI  R30,LOW(0x69)
0002f0 f411      	BRNE _0x202003A
                 _0x2020039:
0002f1 6004      	ORI  R16,LOW(4)
0002f2 c002      	RJMP _0x202003B
                 _0x202003A:
0002f3 37e5      	CPI  R30,LOW(0x75)
0002f4 f431      	BRNE _0x202003C
                 _0x202003B:
0002f5 e8ec      	LDI  R30,LOW(_tbl10_G101*2)
0002f6 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0002f7 83ee      	STD  Y+6,R30
0002f8 83ff      	STD  Y+6+1,R31
0002f9 e015      	LDI  R17,LOW(5)
0002fa c00c      	RJMP _0x202003D
                 _0x202003C:
0002fb 35e8      	CPI  R30,LOW(0x58)
0002fc f411      	BRNE _0x202003F
0002fd 6008      	ORI  R16,LOW(8)
0002fe c003      	RJMP _0x2020040
                 _0x202003F:
0002ff 37e8      	CPI  R30,LOW(0x78)
000300 f009      	BREQ PC+2
000301 c0a1      	RJMP _0x2020071
                 _0x2020040:
000302 e9e6      	LDI  R30,LOW(_tbl16_G101*2)
000303 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000304 83ee      	STD  Y+6,R30
000305 83ff      	STD  Y+6+1,R31
000306 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000307 ff02      	SBRS R16,2
000308 c014      	RJMP _0x2020042
000309 940e 049a 	CALL SUBOPT_0x4
00030b 940e 04b0 	CALL SUBOPT_0x7
00030d 85ab      	LDD  R26,Y+11
00030e 23aa      	TST  R26
00030f f43a      	BRPL _0x2020043
000310 85ea      	LDD  R30,Y+10
000311 85fb      	LDD  R31,Y+10+1
000312 940e 054f 	CALL __ANEGW1
000314 87ea      	STD  Y+10,R30
000315 87fb      	STD  Y+10+1,R31
000316 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000317 3040      	CPI  R20,0
000318 f011      	BREQ _0x2020044
000319 5f1f      	SUBI R17,-LOW(1)
00031a c001      	RJMP _0x2020045
                 _0x2020044:
00031b 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00031c c004      	RJMP _0x2020046
                 _0x2020042:
00031d 940e 049a 	CALL SUBOPT_0x4
00031f 940e 04b0 	CALL SUBOPT_0x7
                 _0x2020046:
                 _0x2020036:
000321 fd00      	SBRC R16,0
000322 c011      	RJMP _0x2020047
                 _0x2020048:
000323 1715      	CP   R17,R21
000324 f478      	BRSH _0x202004A
000325 ff07      	SBRS R16,7
000326 c008      	RJMP _0x202004B
000327 ff02      	SBRS R16,2
000328 c004      	RJMP _0x202004C
000329 7f0b      	ANDI R16,LOW(251)
00032a 2f24      	MOV  R18,R20
00032b 5011      	SUBI R17,LOW(1)
00032c c001      	RJMP _0x202004D
                 _0x202004C:
00032d e320      	LDI  R18,LOW(48)
                 _0x202004D:
00032e c001      	RJMP _0x202004E
                 _0x202004B:
00032f e220      	LDI  R18,LOW(32)
                 _0x202004E:
000330 940e 0493 	CALL SUBOPT_0x3
000332 5051      	SUBI R21,LOW(1)
000333 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000334 2f31      	MOV  R19,R17
000335 ff01      	SBRS R16,1
000336 c017      	RJMP _0x202004F
                 _0x2020050:
000337 3030      	CPI  R19,0
000338 f0a1      	BREQ _0x2020052
000339 ff03      	SBRS R16,3
00033a c006      	RJMP _0x2020053
00033b 81ee      	LDD  R30,Y+6
00033c 81ff      	LDD  R31,Y+6+1
00033d 9125      	LPM  R18,Z+
00033e 83ee      	STD  Y+6,R30
00033f 83ff      	STD  Y+6+1,R31
000340 c005      	RJMP _0x2020054
                 _0x2020053:
000341 81ae      	LDD  R26,Y+6
000342 81bf      	LDD  R27,Y+6+1
000343 912d      	LD   R18,X+
000344 83ae      	STD  Y+6,R26
000345 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000346 940e 0493 	CALL SUBOPT_0x3
000348 3050      	CPI  R21,0
000349 f009      	BREQ _0x2020055
00034a 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00034b 5031      	SUBI R19,LOW(1)
00034c cfea      	RJMP _0x2020050
                 _0x2020052:
00034d c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00034e e320      	LDI  R18,LOW(48)
00034f 81ee      	LDD  R30,Y+6
000350 81ff      	LDD  R31,Y+6+1
000351 940e 0557 	CALL __GETW1PF
000353 87e8      	STD  Y+8,R30
000354 87f9      	STD  Y+8+1,R31
000355 81ee      	LDD  R30,Y+6
000356 81ff      	LDD  R31,Y+6+1
000357 9632      	ADIW R30,2
000358 83ee      	STD  Y+6,R30
000359 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00035a 85e8      	LDD  R30,Y+8
00035b 85f9      	LDD  R31,Y+8+1
00035c 85aa      	LDD  R26,Y+10
00035d 85bb      	LDD  R27,Y+10+1
00035e 17ae      	CP   R26,R30
00035f 07bf      	CPC  R27,R31
000360 f050      	BRLO _0x202005C
000361 5f2f      	SUBI R18,-LOW(1)
000362 85a8      	LDD  R26,Y+8
000363 85b9      	LDD  R27,Y+8+1
000364 85ea      	LDD  R30,Y+10
000365 85fb      	LDD  R31,Y+10+1
000366 1bea      	SUB  R30,R26
000367 0bfb      	SBC  R31,R27
000368 87ea      	STD  Y+10,R30
000369 87fb      	STD  Y+10+1,R31
00036a cfef      	RJMP _0x202005A
                 _0x202005C:
00036b 332a      	CPI  R18,58
00036c f028      	BRLO _0x202005D
00036d ff03      	SBRS R16,3
00036e c002      	RJMP _0x202005E
00036f 5f29      	SUBI R18,-LOW(7)
000370 c001      	RJMP _0x202005F
                 _0x202005E:
000371 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000372 fd04      	SBRC R16,4
000373 c01a      	RJMP _0x2020061
000374 3321      	CPI  R18,49
000375 f420      	BRSH _0x2020063
000376 85a8      	LDD  R26,Y+8
000377 85b9      	LDD  R27,Y+8+1
000378 9711      	SBIW R26,1
000379 f409      	BRNE _0x2020062
                 _0x2020063:
00037a c009      	RJMP _0x20200CD
                 _0x2020062:
00037b 1753      	CP   R21,R19
00037c f010      	BRLO _0x2020067
00037d ff00      	SBRS R16,0
00037e c001      	RJMP _0x2020068
                 _0x2020067:
00037f c013      	RJMP _0x2020066
                 _0x2020068:
000380 e220      	LDI  R18,LOW(32)
000381 ff07      	SBRS R16,7
000382 c00b      	RJMP _0x2020069
000383 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000384 6100      	ORI  R16,LOW(16)
000385 ff02      	SBRS R16,2
000386 c007      	RJMP _0x202006A
000387 7f0b      	ANDI R16,LOW(251)
000388 934a      	ST   -Y,R20
000389 940e 04a0 	CALL SUBOPT_0x5
00038b 3050      	CPI  R21,0
00038c f009      	BREQ _0x202006B
00038d 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00038e 940e 0493 	CALL SUBOPT_0x3
000390 3050      	CPI  R21,0
000391 f009      	BREQ _0x202006C
000392 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000393 5031      	SUBI R19,LOW(1)
000394 85a8      	LDD  R26,Y+8
000395 85b9      	LDD  R27,Y+8+1
000396 9712      	SBIW R26,2
000397 f008      	BRLO _0x2020059
000398 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000399 ff00      	SBRS R16,0
00039a c008      	RJMP _0x202006D
                 _0x202006E:
00039b 3050      	CPI  R21,0
00039c f031      	BREQ _0x2020070
00039d 5051      	SUBI R21,LOW(1)
00039e e2e0      	LDI  R30,LOW(32)
00039f 93ea      	ST   -Y,R30
0003a0 940e 04a0 	CALL SUBOPT_0x5
0003a2 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0003a3 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0003a4 cee0      	RJMP _0x2020016
                 _0x2020018:
0003a5 85ac      	LDD  R26,Y+12
0003a6 85bd      	LDD  R27,Y+12+1
0003a7 940e 0553 	CALL __GETW1P
0003a9 940e 0567 	CALL __LOADLOCR6
0003ab 9664      	ADIW R28,20
0003ac 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003ad 92ff      	PUSH R15
0003ae 2ef8      	MOV  R15,R24
0003af 9726      	SBIW R28,6
0003b0 940e 0562 	CALL __SAVELOCR4
0003b2 940e 04b8 	CALL SUBOPT_0x8
0003b4 9730      	SBIW R30,0
0003b5 f419      	BRNE _0x2020072
0003b6 efef      	LDI  R30,LOW(65535)
0003b7 efff      	LDI  R31,HIGH(65535)
0003b8 c023      	RJMP _0x20C0003
                 _0x2020072:
0003b9 01de      	MOVW R26,R28
0003ba 9616      	ADIW R26,6
0003bb 940e 054b 	CALL __ADDW2R15
0003bd 018d      	MOVW R16,R26
0003be 940e 04b8 	CALL SUBOPT_0x8
0003c0 83ee      	STD  Y+6,R30
0003c1 83ff      	STD  Y+6+1,R31
0003c2 e0e0      	LDI  R30,LOW(0)
0003c3 87e8      	STD  Y+8,R30
0003c4 87e9      	STD  Y+8+1,R30
0003c5 01de      	MOVW R26,R28
0003c6 961a      	ADIW R26,10
0003c7 940e 054b 	CALL __ADDW2R15
0003c9 940e 0553 	CALL __GETW1P
0003cb 93fa      	ST   -Y,R31
0003cc 93ea      	ST   -Y,R30
0003cd 931a      	ST   -Y,R17
0003ce 930a      	ST   -Y,R16
0003cf e3e9      	LDI  R30,LOW(_put_buff_G101)
0003d0 e0f2      	LDI  R31,HIGH(_put_buff_G101)
0003d1 93fa      	ST   -Y,R31
0003d2 93ea      	ST   -Y,R30
0003d3 01de      	MOVW R26,R28
0003d4 961a      	ADIW R26,10
0003d5 dea3      	RCALL __print_G101
0003d6 019f      	MOVW R18,R30
0003d7 81ae      	LDD  R26,Y+6
0003d8 81bf      	LDD  R27,Y+6+1
0003d9 e0e0      	LDI  R30,LOW(0)
0003da 93ec      	ST   X,R30
0003db 01f9      	MOVW R30,R18
                 _0x20C0003:
0003dc 940e 0569 	CALL __LOADLOCR4
0003de 962a      	ADIW R28,10
0003df 90ff      	POP  R15
0003e0 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _rtc_init:
                 ; .FSTART _rtc_init
0003e1 93aa      	ST   -Y,R26
0003e2 81ea      	LDD  R30,Y+2
0003e3 70e3      	ANDI R30,LOW(0x3)
0003e4 83ea      	STD  Y+2,R30
0003e5 81e9      	LDD  R30,Y+1
0003e6 30e0      	CPI  R30,0
0003e7 f019      	BREQ _0x2040003
0003e8 81ea      	LDD  R30,Y+2
0003e9 61e0      	ORI  R30,0x10
0003ea 83ea      	STD  Y+2,R30
                 _0x2040003:
0003eb 81e8      	LD   R30,Y
0003ec 30e0      	CPI  R30,0
0003ed f019      	BREQ _0x2040004
0003ee 81ea      	LDD  R30,Y+2
0003ef 68e0      	ORI  R30,0x80
0003f0 83ea      	STD  Y+2,R30
                 _0x2040004:
0003f1 940e 04bf 	CALL SUBOPT_0x9
0003f3 e0a7      	LDI  R26,LOW(7)
0003f4 940e 0529 	CALL _i2c_write
0003f6 81aa      	LDD  R26,Y+2
0003f7 c023      	RJMP _0x20C0001
                 ; .FEND
                 _rtc_get_time:
                 ; .FSTART _rtc_get_time
0003f8 93ba      	ST   -Y,R27
0003f9 93aa      	ST   -Y,R26
0003fa 940e 04bf 	CALL SUBOPT_0x9
0003fc e0a0      	LDI  R26,LOW(0)
0003fd 940e 04c4 	CALL SUBOPT_0xA
0003ff 940e 04d0 	CALL SUBOPT_0xB
000401 940e 04d7 	CALL SUBOPT_0xC
000403 940e 04dd 	CALL SUBOPT_0xD
000405 2fae      	MOV  R26,R30
000406 940e 0468 	CALL _bcd2bin
000408 81ac      	LDD  R26,Y+4
000409 81bd      	LDD  R27,Y+4+1
00040a 93ec      	ST   X,R30
00040b 940e 0504 	CALL _i2c_stop
00040d 9626      	ADIW R28,6
00040e 9508      	RET
                 ; .FEND
                 _rtc_set_time:
                 ; .FSTART _rtc_set_time
00040f 93aa      	ST   -Y,R26
000410 940e 04bf 	CALL SUBOPT_0x9
000412 e0a0      	LDI  R26,LOW(0)
000413 940e 04e3 	CALL SUBOPT_0xE
000415 81a9      	LDD  R26,Y+1
000416 940e 0475 	CALL _bin2bcd
000418 2fae      	MOV  R26,R30
000419 940e 04ea 	CALL SUBOPT_0xF
                 _0x20C0001:
00041b 940e 0529 	CALL _i2c_write
00041d 940e 0504 	CALL _i2c_stop
                 _0x20C0002:
00041f 9623      	ADIW R28,3
000420 9508      	RET
                 ; .FEND
                 _rtc_get_date:
                 ; .FSTART _rtc_get_date
000421 93ba      	ST   -Y,R27
000422 93aa      	ST   -Y,R26
000423 940e 04bf 	CALL SUBOPT_0x9
000425 e0a3      	LDI  R26,LOW(3)
000426 940e 04c4 	CALL SUBOPT_0xA
000428 81ae      	LDD  R26,Y+6
000429 81bf      	LDD  R27,Y+6+1
00042a 93ec      	ST   X,R30
00042b 940e 04d7 	CALL SUBOPT_0xC
00042d 81ac      	LDD  R26,Y+4
00042e 81bd      	LDD  R27,Y+4+1
00042f 93ec      	ST   X,R30
000430 940e 04d7 	CALL SUBOPT_0xC
000432 940e 04dd 	CALL SUBOPT_0xD
000434 940e 04d0 	CALL SUBOPT_0xB
000436 940e 0504 	CALL _i2c_stop
000438 9628      	ADIW R28,8
000439 9508      	RET
                 ; .FEND
                 _rtc_set_date:
                 ; .FSTART _rtc_set_date
00043a 93aa      	ST   -Y,R26
00043b 940e 04bf 	CALL SUBOPT_0x9
00043d e0a3      	LDI  R26,LOW(3)
00043e 940e 0529 	CALL _i2c_write
000440 81ab      	LDD  R26,Y+3
000441 940e 04ea 	CALL SUBOPT_0xF
000443 940e 0529 	CALL _i2c_write
000445 81a9      	LDD  R26,Y+1
000446 940e 0475 	CALL _bin2bcd
000448 2fae      	MOV  R26,R30
000449 940e 04e3 	CALL SUBOPT_0xE
00044b 940e 0504 	CALL _i2c_stop
00044d 9624      	ADIW R28,4
00044e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00044f 93ba      	ST   -Y,R27
000450 93aa      	ST   -Y,R26
000451 91a9          ld   r26,y+
000452 91b9          ld   r27,y+
000453 27ee          clr  r30
000454 27ff          clr  r31
                 strlen0:
000455 916d          ld   r22,x+
000456 2366          tst  r22
000457 f011          breq strlen1
000458 9631          adiw r30,1
000459 cffb          rjmp strlen0
                 strlen1:
00045a 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00045b 93ba      	ST   -Y,R27
00045c 93aa      	ST   -Y,R26
00045d 27aa          clr  r26
00045e 27bb          clr  r27
00045f 91e9          ld   r30,y+
000460 91f9          ld   r31,y+
                 strlenf0:
000461 9005      	lpm  r0,z+
000462 2000          tst  r0
000463 f011          breq strlenf1
000464 9611          adiw r26,1
000465 cffb          rjmp strlenf0
                 strlenf1:
000466 01fd          movw r30,r26
000467 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _bcd2bin:
                 ; .FSTART _bcd2bin
000468 93aa      	ST   -Y,R26
000469 81e8          ld   r30,y
00046a 95e2          swap r30
00046b 70ef          andi r30,0xf
00046c 2fae          mov  r26,r30
00046d 0faa          lsl  r26
00046e 0faa          lsl  r26
00046f 0fea          add  r30,r26
000470 0fee          lsl  r30
000471 91a9          ld   r26,y+
000472 70af          andi r26,0xf
000473 0fea          add  r30,r26
000474 9508          ret
                 ; .FEND
                 _bin2bcd:
                 ; .FSTART _bin2bcd
000475 93aa      	ST   -Y,R26
000476 91a9          ld   r26,y+
000477 27ee          clr  r30
                 bin2bcd0:
000478 50aa          subi r26,10
000479 f012          brmi bin2bcd1
00047a 5fe0          subi r30,-16
00047b cffc          rjmp bin2bcd0
                 bin2bcd1:
00047c 5fa6          subi r26,-10
00047d 0fea          add  r30,r26
00047e 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _weekday:
000526           	.BYTE 0x1
                 _weekdays:
000527           	.BYTE 0x10
                 __base_y_G100:
000537           	.BYTE 0x4
                 __lcd_x:
00053b           	.BYTE 0x1
                 __lcd_y:
00053c           	.BYTE 0x1
                 __lcd_maxx:
00053d           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x0:
00047f 27ff      	CLR  R31
000480 2766      	CLR  R22
000481 2777      	CLR  R23
000482 940e 055b 	CALL __PUTPARD1
000484 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000485 940e 01ae 	CALL __lcd_write_data
000487 e0a3      	LDI  R26,LOW(3)
000488 e0b0      	LDI  R27,0
000489 940c 0541 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
00048b e3a0      	LDI  R26,LOW(48)
00048c 940e 0189 	CALL __lcd_write_nibble_G100
                +
00048e ec88     +LDI R24 , LOW ( 200 )
00048f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000490 9701     +SBIW R24 , 1
000491 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000492 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
000493 932a      	ST   -Y,R18
000494 85ad      	LDD  R26,Y+13
000495 85be      	LDD  R27,Y+13+1
000496 85ef      	LDD  R30,Y+15
000497 89f8      	LDD  R31,Y+15+1
000498 9509      	ICALL
000499 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
00049a 89e8      	LDD  R30,Y+16
00049b 89f9      	LDD  R31,Y+16+1
00049c 9734      	SBIW R30,4
00049d 8be8      	STD  Y+16,R30
00049e 8bf9      	STD  Y+16+1,R31
00049f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0004a0 85ad      	LDD  R26,Y+13
0004a1 85be      	LDD  R27,Y+13+1
0004a2 85ef      	LDD  R30,Y+15
0004a3 89f8      	LDD  R31,Y+15+1
0004a4 9509      	ICALL
0004a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
0004a6 89a8      	LDD  R26,Y+16
0004a7 89b9      	LDD  R27,Y+16+1
0004a8 9614      	ADIW R26,4
0004a9 940e 0553 	CALL __GETW1P
0004ab 83ee      	STD  Y+6,R30
0004ac 83ff      	STD  Y+6+1,R31
0004ad 81ae      	LDD  R26,Y+6
0004ae 81bf      	LDD  R27,Y+6+1
0004af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
0004b0 89a8      	LDD  R26,Y+16
0004b1 89b9      	LDD  R27,Y+16+1
0004b2 9614      	ADIW R26,4
0004b3 940e 0553 	CALL __GETW1P
0004b5 87ea      	STD  Y+10,R30
0004b6 87fb      	STD  Y+10+1,R31
0004b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0004b8 01de      	MOVW R26,R28
0004b9 961c      	ADIW R26,12
0004ba 940e 054b 	CALL __ADDW2R15
0004bc 940e 0553 	CALL __GETW1P
0004be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
0004bf 940e 04f5 	CALL _i2c_start
0004c1 eda0      	LDI  R26,LOW(208)
0004c2 940c 0529 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
0004c4 940e 0529 	CALL _i2c_write
0004c6 940e 0504 	CALL _i2c_stop
0004c8 940e 04f5 	CALL _i2c_start
0004ca eda1      	LDI  R26,LOW(209)
0004cb 940e 0529 	CALL _i2c_write
0004cd e0a1      	LDI  R26,LOW(1)
0004ce 940c 050e 	JMP  _i2c_read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0004d0 2fae      	MOV  R26,R30
0004d1 940e 0468 	CALL _bcd2bin
0004d3 81a8      	LD   R26,Y
0004d4 81b9      	LDD  R27,Y+1
0004d5 93ec      	ST   X,R30
0004d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xC:
0004d7 e0a1      	LDI  R26,LOW(1)
0004d8 940e 050e 	CALL _i2c_read
0004da 2fae      	MOV  R26,R30
0004db 940c 0468 	JMP  _bcd2bin
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0004dd 81aa      	LDD  R26,Y+2
0004de 81bb      	LDD  R27,Y+2+1
0004df 93ec      	ST   X,R30
0004e0 e0a0      	LDI  R26,LOW(0)
0004e1 940c 050e 	JMP  _i2c_read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
0004e3 940e 0529 	CALL _i2c_write
0004e5 81a8      	LD   R26,Y
0004e6 df8e      	RCALL _bin2bcd
0004e7 2fae      	MOV  R26,R30
0004e8 940c 0529 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
0004ea 940e 0529 	CALL _i2c_write
0004ec 81aa      	LDD  R26,Y+2
0004ed df87      	RCALL _bin2bcd
0004ee 2fae      	MOV  R26,R30
0004ef 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x12 ;PORTD
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
0004f0 9890      	cbi  __i2c_port,__scl_bit
0004f1 9891      	cbi  __i2c_port,__sda_bit
0004f2 9a88      	sbi  __i2c_dir,__scl_bit
0004f3 9889      	cbi  __i2c_dir,__sda_bit
0004f4 c015      	rjmp __i2c_delay2
                 _i2c_start:
0004f5 9889      	cbi  __i2c_dir,__sda_bit
0004f6 9888      	cbi  __i2c_dir,__scl_bit
0004f7 27ee      	clr  r30
0004f8 0000      	nop
0004f9 9b81      	sbis __i2c_pin,__sda_bit
0004fa 9508      	ret
0004fb 9b80      	sbis __i2c_pin,__scl_bit
0004fc 9508      	ret
0004fd d004      	rcall __i2c_delay1
0004fe 9a89      	sbi  __i2c_dir,__sda_bit
0004ff d002      	rcall __i2c_delay1
000500 9a88      	sbi  __i2c_dir,__scl_bit
000501 e0e1      	ldi  r30,1
                 __i2c_delay1:
000502 e06d      	ldi  r22,13
000503 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000504 9a89      	sbi  __i2c_dir,__sda_bit
000505 9a88      	sbi  __i2c_dir,__scl_bit
000506 d003      	rcall __i2c_delay2
000507 9888      	cbi  __i2c_dir,__scl_bit
000508 dff9      	rcall __i2c_delay1
000509 9889      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
00050a e16b      	ldi  r22,27
                 __i2c_delay2l:
00050b 956a      	dec  r22
00050c f7f1      	brne __i2c_delay2l
00050d 9508      	ret
                 _i2c_read:
00050e e078      	ldi  r23,8
                 __i2c_read0:
00050f 9888      	cbi  __i2c_dir,__scl_bit
000510 dff1      	rcall __i2c_delay1
                 __i2c_read3:
000511 9b80      	sbis __i2c_pin,__scl_bit
000512 cffe      	rjmp __i2c_read3
000513 dfee      	rcall __i2c_delay1
000514 9488      	clc
000515 9981      	sbic __i2c_pin,__sda_bit
000516 9408      	sec
000517 9a88      	sbi  __i2c_dir,__scl_bit
000518 dff1      	rcall __i2c_delay2
000519 1fee      	rol  r30
00051a 957a      	dec  r23
00051b f799      	brne __i2c_read0
00051c 2f7a      	mov  r23,r26
00051d 2377      	tst  r23
00051e f411      	brne __i2c_read1
00051f 9889      	cbi  __i2c_dir,__sda_bit
000520 c001      	rjmp __i2c_read2
                 __i2c_read1:
000521 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
000522 dfdf      	rcall __i2c_delay1
000523 9888      	cbi  __i2c_dir,__scl_bit
000524 dfe5      	rcall __i2c_delay2
000525 9a88      	sbi  __i2c_dir,__scl_bit
000526 dfdb      	rcall __i2c_delay1
000527 9889      	cbi  __i2c_dir,__sda_bit
000528 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
000529 e078      	ldi  r23,8
                 __i2c_write0:
00052a 0faa      	lsl  r26
00052b f410      	brcc __i2c_write1
00052c 9889      	cbi  __i2c_dir,__sda_bit
00052d c001      	rjmp __i2c_write2
                 __i2c_write1:
00052e 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
00052f dfda      	rcall __i2c_delay2
000530 9888      	cbi  __i2c_dir,__scl_bit
000531 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
000532 9b80      	sbis __i2c_pin,__scl_bit
000533 cffe      	rjmp __i2c_write3
000534 dfcd      	rcall __i2c_delay1
000535 9a88      	sbi  __i2c_dir,__scl_bit
000536 957a      	dec  r23
000537 f791      	brne __i2c_write0
000538 9889      	cbi  __i2c_dir,__sda_bit
000539 dfc8      	rcall __i2c_delay1
00053a 9888      	cbi  __i2c_dir,__scl_bit
00053b dfce      	rcall __i2c_delay2
00053c e0e1      	ldi  r30,1
00053d 9981      	sbic __i2c_pin,__sda_bit
00053e 27ee      	clr  r30
00053f 9a88      	sbi  __i2c_dir,__scl_bit
000540 cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
000541 9610      	adiw r26,0
000542 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000543 ed80     +LDI R24 , LOW ( 0x7D0 )
000544 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000545 9701     +SBIW R24 , 1
000546 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000547 95a8      	wdr
000548 9711      	sbiw r26,1
000549 f7c9      	brne __delay_ms0
                 __delay_ms1:
00054a 9508      	ret
                 
                 __ADDW2R15:
00054b 2400      	CLR  R0
00054c 0daf      	ADD  R26,R15
00054d 1db0      	ADC  R27,R0
00054e 9508      	RET
                 
                 __ANEGW1:
00054f 95f1      	NEG  R31
000550 95e1      	NEG  R30
000551 40f0      	SBCI R31,0
000552 9508      	RET
                 
                 __GETW1P:
000553 91ed      	LD   R30,X+
000554 91fc      	LD   R31,X
000555 9711      	SBIW R26,1
000556 9508      	RET
                 
                 __GETW1PF:
000557 9005      	LPM  R0,Z+
000558 91f4      	LPM  R31,Z
000559 2de0      	MOV  R30,R0
00055a 9508      	RET
                 
                 __PUTPARD1:
00055b 937a      	ST   -Y,R23
00055c 936a      	ST   -Y,R22
00055d 93fa      	ST   -Y,R31
00055e 93ea      	ST   -Y,R30
00055f 9508      	RET
                 
                 __SAVELOCR6:
000560 935a      	ST   -Y,R21
                 __SAVELOCR5:
000561 934a      	ST   -Y,R20
                 __SAVELOCR4:
000562 933a      	ST   -Y,R19
                 __SAVELOCR3:
000563 932a      	ST   -Y,R18
                 __SAVELOCR2:
000564 931a      	ST   -Y,R17
000565 930a      	ST   -Y,R16
000566 9508      	RET
                 
                 __LOADLOCR6:
000567 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000568 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000569 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00056a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00056b 8119      	LDD  R17,Y+1
00056c 8108      	LD   R16,Y
00056d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   2 r5 :   1 r6 :   5 r7 :   3 
r8 :   1 r9 :   1 r10:   1 r11:   1 r12:   1 r13:   1 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  10 r23:   9 
r24:  25 r25:   5 r26: 165 r27:  50 r28:  23 r29:   1 r30: 254 r31:  81 
x  :  28 y  : 236 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   7 
adiw  :  31 and   :   0 andi  :  11 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  23 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   0 brmi  :   2 brne  :  36 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 102 
cbi   :  24 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  19 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   6 cpc   :   4 cpi   :  37 cpse  :   0 dec   :   8 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   1 inc   :   0 jmp   :  42 ld    :  40 ldd   :  93 
ldi   : 143 lds   :   7 lpm   :  14 lsl   :   5 lsr   :   0 mov   :  28 
movw  :  21 mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   1 
or    :   0 ori   :   8 out   :   8 pop   :   1 push  :   1 rcall :  40 
ret   :  35 reti  :   1 rjmp  :  77 rol   :   2 ror   :   0 sbc   :   1 
sbci  :   2 sbi   :  24 sbic  :   2 sbis  :   4 sbiw  :  20 sbr   :   0 
sbrc  :   2 sbrs  :  10 sec   :   1 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 100 std   :  34 sts   :  10 sub   :   1 subi  :  21 
swap  :   2 tst   :   5 wdr   :   1 
Instructions used: 61 out of 117 (52.1%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000adc   2602    178   2780  131072   2.1%
[.dseg] 0x000100 0x00053e      0     62     62    4096   1.5%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 11 warnings
